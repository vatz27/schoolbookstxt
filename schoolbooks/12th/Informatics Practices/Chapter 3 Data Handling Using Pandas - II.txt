C h a p t e r Data Handling using 3 Pandas - II “We owe a lot to the Indians, who taught us how to count, without which no worthwhile scientific discovery could have been made.” —  Albert Einstein In this chapter » Introduction 3.1 I » Descriptive Statistics ntroductIon » Data Aggregations As discussed in the previous chapter, Pandas » Sorting a DataFrame is a well established Python Library used for manipulation, processing and analysis of » GROUP BY Functions data. We have already discussed the basic » Altering the Index operations on Series and DataFrame like » Other DataFrame creating them and then accessing data from Operations them. Pandas provides more powerful and » Handling Missing useful functions for data analysis. Values In this chapter, we will be working with » Import and Export more advanced features of DataFrame like of Data between sorting data, answering analytical questions Pandas and MySQL using the data, cleaning data and applying different useful functions on the data. Below is the example data on which we will be applying the advanced features of Pandas. 2024-25 Chapter 3.indd   63 11/26/2020   12:46:03 PM 64 InformatIcs PractIces Case Study Let us consider the data of marks scored in unit tests held in school. For each unit test, the marks scored by all students of the class is recorded. Maximum marks are 25 in each subject. The subjects are Maths, Science. Social Studies (S.St.), Hindi, and English. For simplicity, we assume there are 4 students in the class and the table below shows their marks in Unit Test 1, Unit Test 2 and Unit Test 3. Table 3.1 shows this data. Table 3.1 Case Study Result Name/ Unit Maths Science S.St. Hindi Eng Subjects Test Raman 1 22 21 18 20 21 Raman 2 21 20 17 22 24 Raman 3 14 19 15 24 23 Zuhaire 1 20 17 22 24 19 Zuhaire 2 23 15 21 25 15 Zuhaire 3 22 18 19 23 13 Aashravy 1 23 19 20 15 22 Aashravy 2 24 22 24 17 21 Aashravy 3 12 25 19 21 23 Mishti 1 15 22 25 22 22 Mishti 2 18 21 25 24 23 Mishti 3 17 18 20 25 20 Let us store the data in a DataFrame, as shown in Program 3.1: Program 3-1 Store the Result data in a DataFrame called marksUT. >>> import pandas as pd >>> marksUT= {'Name':['Raman','Raman','Raman','Zuhaire','Zuhaire','Zu haire', 'Ashravy','Ashravy','Ashravy','Mishti','Mishti','Mishti'], 'UT':[1,2,3,1,2,3,1,2,3,1,2,3], 'Maths':[22,21,14,20,23,22,23,24,12,15,18,17], 'Science':[21,20,19,17,15,18,19,22,25,22,21,18], 'S.St':[18,17,15,22,21,19,20,24,19,25,25,20], 'Hindi':[20,22,24,24,25,23,15,17,21,22,24,25], 'Eng':[21,24,23,19,15,13,22,21,23,22,23,20] } >>> df=pd.DataFrame(marksUT) >>> print(df) 2024-25 Chapter 3.indd   64 11/26/2020   12:46:03 PM Data HanDling using PanDas - ii 65 Name  UT  Maths  Science  S.St  Hindi  Eng 0     Raman   1     22       21    18     20   21 1     Raman   2     21       20    17     22   24 2     Raman   3     14       19    15     24   23 3   Zuhaire   1     20       17    22     24   19 4   Zuhaire   2     23       15    21     25   15 5   Zuhaire   3     22       18    19     23   13 6   Ashravy   1     23       19    20     15   22 7   Ashravy   2     24       22    24     17   21 8   Ashravy   3     12       25    19     21   23 9    Mishti   1     15       22    25     22   22 10   Mishti   2     18       21    25     24   23 11   Mishti   3     17       18    20     25   20 3.2 descrIptIve statIstIcs Descriptive Statistics are used to summarise the given data. In other words, they refer to the methods which are used to get some basic idea  about the data. In this section, we will be discussing descriptive statistical methods that can be applied to a DataFrame. These are max, min, count, sum, mean, median, mode, quartiles, variance. In each case, we will consider the above created DataFrame df. 3.2.1 Calculating Maximum Values DataFrame.max() is used to calculate the maximum values from the DataFrame, regardless of its data types. The following statement outputs the maximum value of each column of the DataFrame: >>> print(df.max()) Name       Zuhaire  #Maximum value in name column #(alphabetically) UT               3  #Maximum value in column UT Maths           24  #Maximum value in column Maths Science         25  #Maximum value in column Science S.St            25  #Maximum value in column S.St Hindi           25  #Maximum value in column Hindi Eng             24  #Maximum value in column Eng dtype: object If we want to output maximum value for the columns having only numeric values, then we can set the parameter numeric_only=True in the max() method, as shown below: 2024-25 Chapter 3.indd   65 11/26/2020   12:46:04 PM 66 InformatIcs PractIces >>> print(df.max(numeric_only=True)) UT          3 Maths      24 Science    25 S.St       25 Hindi      25 Eng        24 dtype: int64 Program 3-2  Write the statements to output the maximum marks obtained in each subject in Unit Test 2. >>> dfUT2 = df[df.UT == 2] >>> print('\nResult of Unit Test 2: \n\n',dfUT2) Result of Unit Test 2: Name  UT  Maths  Science  S.St  Hindi  Eng 1     Raman   2     21       20    17     22   24 4   Zuhaire   2     23       15    21     25   15 7   Ashravy   2     24       22    24     17   21 10   Mishti   2     18       21    25     24   23 The output of Program 3.2 can also be achieved using the >>> print('\nMaximum Mark obtained in following statements Each Subject in Unit Test 2: \n\n',dfUT2. max(numeric_only=True)) >>> dfUT2=df[df ['UT']==2].max (numeric_only=True) Maximum Mark obtained in Each Subject in Unit >>> print(dfUT2) Test 2: UT          2 Maths      24 Science    22 S.St       25 Hindi      25 Eng        24 dtype: int64 By default, the max() method finds the maximum value of each column (which means, axis=0). However, to find the maximum value of each row, we have to specify axis = 1 as its argument. #maximum marks for each student in each unit test among all the subjects 2024-25 Chapter 3.indd   66 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 67 >>> df.max(axis=1) notes 0     22 1     24 2     24 3     24 4     25 5     23 6     23 7     24 8     25 9     25 10    25 11    25 dtype: int64 Note: In most of the python function calls, axis = 0 refers to row wise operations and axis = 1 refers to column wise operations. But in the call of max(), axis = 1 gives row wise output and axis = 0 (default case) gives column-wise output. Similar is the case with all statistical operations discussed in this chapter. 3.2.2 Calculating Minimum Values DataFrame.min() is used to display the minimum values from the DataFrame, regardless of the data types. That is, it shows the minimum value of each column or row. The following line of code output the minimum value of each column of the DataFrame: >>> print(df.min()) Name       Ashravy UT               1 Maths           12 Science         15 S.St            15 Hindi           15 Eng             13 dtype: object Program 3-3   Write the statements to display the minimum marks obtained by a particular student ‘Mishti’ in all the unit tests for each subject. >>> dfMishti = df.loc[df.Name == 'Mishti'] 2024-25 Chapter 3.indd   67 11/26/2020   12:46:04 PM 68 InformatIcs PractIces >>> print('\nMarks obtained by Mishti in all the Unit Tests \n\n',dfMishti) Marks obtained by Mishti in all the Unit Tests Name   UT  Maths  Science  S.St  Hindi  Eng 9   Mishti   1     15       22    25     22   22 10  Mishti   2     18       21    25     24   23 11  Mishti   3     17       18    20     25   20 >>> print('\nMinimum Marks obtained by Mishti in each subject across the unit tests\n\n', dfMishti[['Maths','Science','S. The output of Program St','Hindi','Eng']].min()) 3.3 can also be Minimum Marks obtained by Mishti in each subject achieved using the across the unit tests: following statements >>> dfMishti=df[[' Maths','Science','S. Maths      15 St','Hindi','Eng']][df. Science    18 Name == 'Mishti'].min() S.St       20 >>> print(dfMishti) Hindi      22 Eng        20 dtype: int64 Note: Since we did not want to output the min value of column UT, we mentioned all the other column names for which minimum is to be calculated. 3.2.3 Calculating Sum of Values DataFrame.sum() will display the sum of the values from the DataFrame regardless of its datatype. The following line of code outputs the sum of each column of the DataFrame: >>> print(df.sum()) Name RamanRamanRamanZuhaireZuhaireZuhaireAshravyAsh... UT                                          24 Maths                                       231 Science                                     237 S.St                                        245 Hindi                                       262 Eng                                         246 dtype: object We may not be interested to sum text values. So, to print the sum of a particular column, we need to 2024-25 Chapter 3.indd   68 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 69 specify the column name in the call to function sum. The following statement prints the total marks of subject mathematics: >>> print(df['Maths'].sum()) 231 To calculate total marks of a particular student, the name of the student needs to be specified. Program 3-4 Write the python statement to print Think and Reflect the total marks secured by raman in Can you write a each subject. shortened code to get the output of Program >>> dfRaman=df[df['Name']=='Raman'] 3.4? >>> print(“Marks obtained by Raman in each test are:\n”, dfRaman) Marks obtained by Raman in each test are: Name  UT  Maths  Science  S.St  Hindi  Eng 0  Raman   1     22       21    18     20   21 1  Raman   2     21       20    17     22   24 2  Raman   3     14       19    15     24   23 >>> dfRaman[['Maths','Science','S. St','Hindi','Eng']].sum() Maths      57 Science    60 S.St       50 Activity 3.1 Hindi      66 Write the python Eng        68 statements to print dtype: int64 the sum of the english marks scored by #To print total marks scored by Raman in all Mishti. subjects in each Unit Test >>> dfRaman[['Maths','Science','S. St','Hindi','Eng']].sum(axis=1) 0    102 1    104 2     95 dtype: int64 3.2.4 Calculating Number of Values DataFrame.count() will display the total number of values for each column or row of a DataFrame. To count the rows we need to use the argument axis=1 as shown in the Program 3.5 below. 2024-25 Chapter 3.indd   69 11/26/2020   12:46:04 PM 70 InformatIcs PractIces notes >>> print(df.count()) Name       12 UT         12 Maths      12 Science    12 S.St       12 Hindi      12 Eng        12 dtype: int64 Program 3-5  Write a statement to count the number of values in a row. >>> df.count(axis=1) 0     7 1     7 2     7 3     7 4     7 5     7 6     7 7     7 8     7 9     7 10    7 11    7 dtype: int64 3.2.5 Calculating Mean DataFrame.mean() will display the mean (average) of the values of each column of a DataFrame. It is only applicable for numeric values. >>> df.mean() UT          2.5000 Maths      18.6000 Science    19.8000 S.St       20.0000 Hindi      21.3125 Eng        19.8000 dtype: float64 Program 3-6  Write the statements to get an average of marks obtained by Zuhaire in all the Unit Tests. 2024-25 Chapter 3.indd   70 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 71 >>> dfZuhaireMarks = dfZuhaire. loc[:,'Maths':'Eng'] >>> print("Slicing of the DataFrame to get only the marks\n", dfZuhaireMarks) Slicing of the DataFrame to get only the marks Maths  Science  S.St  Hindi  Eng 3     20       17    22     24   19 4     23       15    21     25   15 5     22       18    19     23   13 >>> print("Average of marks obtained by Zuhaire in all Unit Tests \n", dfZuhaireMarks. mean(axis=1)) Average of marks obtained by Zuhaire in all Unit Tests 3    20.4 4    19.8 5    19.0 Think and Reflect dtype: float64 Try to write a short In the above output, 20.4 is the average of marks code to get the above obtained by Zuhaire in Unit Test 1. Similarly, 19.8 and output. Remember 19.0 are the average of marks in Unit Test 2 and 3 to print the relevant respectively. headings of the output. 3.2.6 Calculating Median DataFrame.Median() will display the middle value of the data. This function will display the median of the values of each column of a DataFrame. It is only applicable for numeric values. >>> print(df.median()) UT          2.5 Maths      19.0 Science    20.0 S.St       19.5 Hindi      21.5 Eng        21.0 dtype: float64 Program 3-7  Write the statements to print the median marks of mathematics in UT1. >>> dfMaths=df['Maths'] 2024-25 Chapter 3.indd   71 11/26/2020   12:46:04 PM 72 InformatIcs PractIces >>> dfMathsUT1=dfMaths[df.UT==1] >>> print("Displaying the marks scored in Mathematics in UT1\n",dfMathsUT1) Displaying the marks of UT1, subject Mathematics 0    22 3    20 6    23 9    15 Name: Maths, dtype: int64 >>> dfMathMedian=dfMathsUT1.median() >>> print("Displaying the median of Mathematics in UT1\n”,dfMathMedian) Activity 3.2 Displaying the median of Mathematics in UT1 Find the median of the 21.0 values of the rows of Here, the number of values are even in number the DataFrame. so two middle values are there i.e. 20 and 22. Hence, Median is the  average of 20 and 22. 3.2.7 Calculating Mode DateFrame.mode() will display the mode. The mode is defined as the value that appears the most number of times in a data. This function will display the mode of each column or row of the DataFrame. To get the mode of Hindi marks, the following statement can be used. >>> df['Hindi'] 0     20 1     22 2     24 3     24 4     25 5     23 6     15 7     17 8     21 9     22 Activity 3.3 10    24 Calculate the mode 11    25 of marks scored in Maths. Name: Hindi, dtype: int64 >>> df['Hindi'].mode() 2024-25 Chapter 3.indd   72 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 73 0    24 notes dtype: int64 Note that three students have got 24 marks in Hindi subject while two students got 25 marks, one student got 23 marks, two students got 22 marks, one student each got 21, 20, 15, 17 marks. 3.2.8 Calculating Quartile Dataframe.quantile() is used to get the quartiles. It will output the quartile of each column or row of the DataFrame in four parts i.e. the first quartile is 25% (parameter q = .25), the second quartile is 50% (Median), the third quartile is 75% (parameter q = .75). By default, it will display the second quantile (median) of all numeric values. >>> df.quantile() # by default, median is the output UT          2.0 Maths      20.5 Science    19.5 S.St       20.0 Hindi      22.5 Eng        21.5 Name: 0.5, dtype: float64 >>> df.quantile(q=.25) UT          1.00 Maths      16.50 Science    18.00 S.St       18.75 Hindi      20.75 Eng        19.75 Name: 0.25, dtype: float64 >>> df.quantile(q=.75) UT          3.00 Maths      22.25 Science    21.25 S.St       22.50 Hindi      24.00 Eng        23.00 Name: 0.75, dtype: float64 2024-25 Chapter 3.indd   73 11/26/2020   12:46:04 PM 74 InformatIcs PractIces Program 3-8  Write the statement to display the first and third quartiles of all subjects. >>> dfSubject=df[['Maths','Science','S. St','Hindi','Eng']] >>> print("Marks of all the subjects:\ n",dfSubject) Marks of all the subjects: Maths  Science  S.St  Hindi  Eng 0      22       21    18     20   21 1      21       20    17     22   24 2      14       19    15     24   23 3      20       17    22     24   19 4      23       15    21     25   15 5      22       18    19     23   13 6      23       19    20     15   22 7      24       22    24     17   21 8      12       25    19     21   23 9      15       22    25     22   22 10     18       21    25     24   23 11     17       18    20     25   20 >>> dfQ=dfSubject.quantile([.25,.75]) >>> print("First and third quartiles of all the subjects:\n",dfQ) First and third quartiles of all the subjects: Maths  Science   S.St  Hindi    Eng 0.25  16.50    18.00  18.75  20.75  19.75 0.75  22.25    21.25  22.50  24.00  23.00 3.2.9 Calculating Variance DataFrame.var() is used to display the variance. It is the average of squared differences from the mean. Activity 3.4 >>> df[['Maths','Science','S. Find the variance and St','Hindi','Eng']].var() standard deviation of the following scores on an exam: 92, 95, 85, 80, 75, 50. Maths      15.840909 Science     7.113636 S.St        9.901515 2024-25 Chapter 3.indd   74 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 75 Hindi       9.969697 Eng        11.363636 dtype: float64 3.2.10 Calculating Standard Deviation DataFrame.std() returns the standard deviation of the values. Standard deviation is calculated as the square root of the variance. >>> df[['Maths','Science','S. St','Hindi','Eng']].std() Maths      3.980064 Science    2.667140 S.St       3.146667 Hindi      3.157483 Eng        3.370999 dtype: float64 DataFrame.describe() function displays the descriptive statistical values in a single command. These values help us describe a set of data in a DataFrame. > > >   d f . d e s c r i be() UT      Maths    Science       S.St     Hindi        Eng count  12.000000  12.000000  12.00000  12.000000  12.000000  12.000000 mean    2.000000  19.250000  19.75000  20.416667  21.833333  20.500000 std     0.852803   3.980064   2.66714   3.146667   3.157483   3.370999 min     1.000000  12.000000  15.00000  15.000000  15.000000  13.000000 25%     1.000000  16.500000  18.00000  18.750000  20.750000  19.750000 50%     2.000000  20.500000  19.50000  20.000000  22.500000  21.500000 75%     3.000000  22.250000  21.25000  22.500000  24.000000  23.000000 max     3.000000  24.000000  25.00000  25.000000  25.000000  24.000000 3.3 data aggregatIons Aggregation means to transform the dataset and produce a single numeric value from an array. Aggregation can be applied to one or more columns together. Aggregate functions are max(),min(), sum(), count(), std(), var(). >>> df.aggregate('max') Name    Zuhaire # displaying the maximum of Name as well UT               3 Maths           24 2024-25 Chapter 3.indd   75 11/26/2020   12:46:04 PM 76 InformatIcs PractIces notes Science         25 S.St            25 Hindi           25 Eng             24 dtype: object #To use multiple aggregate functions in a single statement >>> df.aggregate(['max','count']) Name    UT  Maths Science S.St  Hindi  Eng max  Zuhaire  3     24      25   25     25   24 count  12    12     12      12   12     12   12 >>> df['Maths'].aggregate(['max','min']) max    24 min    12 Name: Maths, dtype: int64 Note: We can also use the parameter axis with aggregate function. By default, the value of axis is zero, means columns. #Using the above statement with axis=0 gives the same result >>> df['Maths'].aggregate(['max','min'],axis=0) max    24 min    12 Name: Maths, dtype: int64 #Total marks of Maths and Science obtained by each student. #Use sum() with axis=1 (Row-wise summation) >>> df[['Maths','Science']]. aggregate('sum',axis=1) 0     43 1     41 2     33 3     37 4     38 5     40 6     42 7     46 8     37 9     37 10    39 11    35 dtype: int64 2024-25 Chapter 3.indd   76 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 77 3.4 sortIng a dataFrame Sorting refers to the arrangement of data elements in a specified order, which can either be ascending or descending. Pandas provide sort_values() function to sort the data values of a DataFrame. The syntax of the function is as follows: DataFrame.sort_values(by, axis=0, ascending=True) Here, a column list (by), axis arguments (0 for rows and 1 for columns) and the order of sorting (ascending = False or True) are passed as arguments. By default, sorting is done on row indexes in ascending order. Consider a scenario, where the teacher is interested in arranging a list according to the names of the students or according to marks obtained in a particular subject. In such cases, sorting can be used to obtain the desired results. Following is the python code for sorting the data in the DataFrame created at program 3.1. To sort the entire data on the basis of attribute ‘Name’, we use the following command: #By default, sorting is done in ascending order. >>> print(df.sort_values(by=['Name'])) Name  UT  Maths  Science  S.St  Hindi  Eng 6   Ashravy   1     23       19    20     15   22 7   Ashravy   2     24       22    24     17   21 8   Ashravy   3     12       25    19     21   23 9    Mishti   1     15       22    25     22   22 10   Mishti   2     18       21    25     24   23 11   Mishti   3     17       18    20     25   20 0     Raman   1     22       21    18     20   21 1     Raman   2     21       20    17     22   24 2     Raman   3     14       19    15     24   23 3   Zuhaire   1     20       17    22     24   19 4   Zuhaire   2     23       15    21     25   15 5   Zuhaire   3     22       18    19     23   13 Now, to obtain sorted list of marks scored by all students in Science in Unit Test 2, the following code can be used: # Get the data corresponding to Unit Test 2 >>> dfUT2 = df[df.UT == 2] # Sort according to ascending order of marks in Science 2024-25 Chapter 3.indd   77 11/26/2020   12:46:04 PM 78 InformatIcs PractIces >>> print(dfUT2.sort_values(by=['Science'])) Name  UT  Maths  Science  S.St  Hindi  Eng 4   Zuhaire   2     23       15    21     25   15 1     Raman   2     21       20    17     22   24 10   Mishti   2     18       21    25     24   23 7   Ashravy   2     24       22    24     17   21 Program 3-9 Write the statement which will sort the marks in English in the DataFrame df based on  Unit Test 3, in descending order. # Get the data corresponding to Unit Test 3 >>> dfUT3 = df[df.UT == 3] # Sort according to descending order of marks in Science >>> print(dfUT3.sort_values(by=['Eng'],ascending=F alse)) Name  UT  Maths  Science  S.St  Hindi  Eng 2     Raman   3     14       19    15     24   23 8   Ashravy   3     12       25    19     21   23 11   Mishti   3     17       18    20     25   20 5   Zuhaire   3     22       18    19     23   13 A DataFrame can be sorted based on multiple columns. Following is the code of sorting the DataFrame df based on marks in Science in Unit Test 3 in ascending order. If marks in Science are the same, then sorting will be done on the basis of marks in Hindi. # Get the data corresponding to marks in Unit Test 3 >>> dfUT3 = df[df.UT == 3] # Sort the data according to Science and then according to Hindi >>> print(dfUT3.sort_ values(by=['Science','Hindi'])) Name  UT  Maths  Science  S.St  Hindi  Eng 5   Zuhaire   3     22       18    19     23   13 11   Mishti   3     17       18    20     25   20 2     Raman   3     14       19    15     24   23 8   Ashravy   3     12       25    19     21   23 Here, we can see that the list is sorted on the basis of marks in Science. Two students namely, Zuhaire and Mishti have equal marks (18) in Science. Therefore for them, sorting is done on the basis of marks in Hindi. 2024-25 Chapter 3.indd   78 11/26/2020   12:46:04 PM Data HanDling using PanDas - ii 79 3.5 group BY FunctIons notes In pandas, DataFrame.GROUP BY() function is used to split the data into groups based on some criteria. Pandas objects like a DataFrame can be split on any of their axes. The GROUP BY function works based on a split-apply-combine strategy which is shown below using a 3-step process: Step 1: Split the data into groups by creating a GROUP BY object from the original DataFrame. Step 2: Apply the required function. Step 3: Combine the results to form a new DataFrame. To understand this better, let us consider the data shown in the diagram given below. Here, we have a twocolumn DataFrame (key, data). We need to find the sum of the data column for a particular key, i.e. sum of all the data elements with key A, B and C, respectively. To do so, we first split the entire DataFrame into groups by key column. Then, we apply the sum function on the respective groups. Finally, we combine the results to form a new DataFrame that contains the desired result. split Apply Combine key data A 0 A 0 A 5 Sum B 5 A 10 C 10 A 5 B 5 A 15 Sum B 10 B 10 B 30 C 15 B 15 C 45 A 10 C 10 B 15 Sum C 15 C 20 C 20 Figure 3.1: A DataFrame with two columns The following statements show how to apply GROUP BY() function on our DataFrame df created at Program 3.1: #Create a GROUP BY Name of the student from DataFrame df >>> g1=df.GROUP BY('Name') 2024-25 Chapter 3.indd   79 11/26/2020   12:46:04 PM 80 InformatIcs PractIces notes #Displaying the first entry from each group >>> g1.first() UT  Maths  Science  S.St  Hindi  Eng Name Ashravy   1     23       19    20     15   22 Mishti    1     15       22    25     22   22 Raman     1     22       21    18     20   21 Zuhaire   1     20       17    22     24   19 #Displaying the size of each group >>> g1.size() Name Ashravy    3 Mishti     3 Raman      3 Zuhaire    3 dtype: int64 #Displaying group data, i.e., group_name, row indexes corresponding to the group and their data type >>> g1.groups {'Ashravy': Int64Index([6, 7, 8], dtype='int64'), 'Mishti': Int64Index([9, 10, 11], dtype='int64'), 'Raman': Int64Index([0, 1, 2], dtype='int64'), 'Zuhaire': Int64Index([3, 4, 5], dtype='int64')} #Printing data of a single group >>> g1.get_group('Raman') UT  Maths  Science  S.St  Hindi  Eng 0   1     22       21    18     20   21 1   2     21       20    17     22   24 2   3     14       19    15     24   23 #Grouping with respect to multiple attributes #Creating a GROUP BY Name and UT