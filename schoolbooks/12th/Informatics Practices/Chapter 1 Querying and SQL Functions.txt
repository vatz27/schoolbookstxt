C h a p t e r Querying and SQL 1 Functions “Any unique image that you desire probably already exists on the internet or in some database... The problem today is no longer how to create the right image, but how to find an already existing one” —  Lev Manovich In this chapter » Introduction » Functions in SQL 1.1 Introduction » Group By in SQL In Class XI, we have understood database » Operations on concepts and learned how to create databases Relations using MySQL. We have also learnt how to » Using Two Relations populate, manipulate and retrieve data from in a Query a database using SQL queries. In this chapter, we are going to learn more SQL commands which are required to perform various queries in a database. We will understand how to use single row functions, multiple row functions, arranging records in ascending or descending order, grouping records based on some criteria, and working on multiple tables using SQL. Let us create a database called CARSHOWROOM, having the schema as 2024-25 Chapter 1.indd   1 11/26/2020   12:31:29 PM 2 InformatIcs PractIces shown in Figure 1.1. It has the following four relations: • INVENTORY: Stores name, price, model, year of manufacturing, and fuel type for each car in inventory of the showroom, • CUSTOMER: Stores customer Id, name, address, phone number and email for each customer, • SALE: Stores the invoice number, car Id, customer id, sale date, mode of payment, sales person’s employee Id, and selling price of the car sold, • EMPLOYEE: Stores employee Id, name, date of birth, date of joining, designation, and salary of each employee in the showroom. Inventory Customer Car ID CustID CarName CustName Price CustAdd Model Phone YearManufacture Email FuelType Sale Employee InvoiceNo CarID EmpID CustID EmpName SaleDate DOB PaymentMode DOJ EmpID Designation SalePrice Salary Figure 1.1: Schema diagram of database CARSHOWROOM The records of the four relations are shown in Tables 1.1, 1.2, 1.3, and 1.4 respectively. Table 1.1 INVENTORY mysql> SELECT * FROM INVENTORY; +-------+--------+-----------+-----------+-----------------+----------+ | CarId | CarName| Price     | Model     | YearManufacture | Fueltype | +-------+--------+-----------+-----------+-----------------+----------+ | D001  | Car1   | 582613.00 | LXI       |            2017 | Petrol   | | D002  | Car1   | 673112.00 | VXI       |            2018 | Petrol   | | B001  | Car2   | 567031.00 | Sigma1.2  |            2019 | Petrol   | | B002  | Car2   | 647858.00 | Delta1.2  |            2018 | Petrol   | 2024-25 Chapter 1.indd   2 11/26/2020   12:31:29 PM Querying and SQL FunctionS 3 | E001  | Car3   | 355205.00 | 5 STR STD |            2017 | CNG      | | E002  | Car3   | 654914.00 | CARE      |            2018 | CNG      | | S001  | Car4   | 514000.00 | LXI       |            2017 | Petrol   | | S002  | Car4   | 614000.00 | VXI       |            2018 | Petrol   | +-------+--------+-----------+-----------+-----------------+----------+ 8 rows in set (0.00 sec) Table 1.2 CUSTOMER mysql> SELECT * FROM CUSTOMER; +-------+------------+-----------------------+------------+-------------------+ |CustId | CustName   | CustAdd               | Phone      | Email             | +-------+------------+-----------------------+------------+-------------------+ | C0001 |AmitSaha    | L-10, Pitampura       | 4564587852 |amitsaha2@gmail.com| | C0002 |Rehnuma     | J-12, SAKET           | 5527688761 |rehnuma@hotmail.com| | C0003 |CharviNayyar| 10/9, FF, Rohini      | 6811635425 |charvi123@yahoo.com| | C0004 |Gurpreet    | A-10/2, SF, MayurVihar| 3511056125 |gur_singh@yahoo.com| +-------+------------+-----------------------+------------+-------------------+ 4 rows in set (0.00 sec) Table 1.3 SALE mysql> SELECT * FROM SALE; +-----------+-------+--------+------------+--------------+-------+-----------+ | InvoiceNo | CarId | CustId | SaleDate   | PaymentMode  |EmpID | SalePrice  | +-----------+-------+--------+------------+--------------+-------+-----------+ | I00001    | D001  | C0001  | 2019-01-24 | Credit Card  | E004  | 613247.00 | | I00002    | S001  | C0002  | 2018-12-12 | Online       | E001  | 590321.00 | | I00003    | S002  | C0004  | 2019-01-25 | Cheque       | E010  | 604000.00 | | I00004    | D002  | C0001  | 2018-10-15 | Bank Finance | E007  | 659982.00 | | I00005    | E001  | C0003  | 2018-12-20 | Credit Card  | E002  | 369310.00 | | I00006    | S002  | C0002  | 2019-01-30 | Bank Finance | E007  | 620214.00 | +-----------+-------+--------+------------+--------------+-------+-----------+ 6 rows in set (0.00 sec) Table 1.4 EMPLOYEE mysql> SELECT * FROM EMPLOYEE; +-------+----------+------------+------------+--------------+--------+ | EmpID | EmpName  | DOB        | DOJ        | Designation  | Salary | +-------+----------+------------+------------+--------------+--------+ | E001  |Rushil    | 1994-07-10 | 2017-12-12 | Salesman     |  25550 | | E002  |Sanjay    | 1990-03-12 | 2016-06-05 | Salesman     |  33100 | | E003  |Zohar     | 1975-08-30 | 1999-01-08 | Peon         |  20000 | | E004  |Arpit     | 1989-06-06 | 2010-12-02 | Salesman     |  39100 | | E006  |Sanjucta  | 1985-11-03 | 2012-07-01 | Receptionist |  27350 | | E007  |Mayank    | 1993-04-03 | 2017-01-01 | Salesman     |  27352 | | E010  |Rajkumar  | 1987-02-26 | 2013-10-23 | Salesman     |  31111 | +-------+----------+------------+------------+--------------+--------+ 7 rows in set (0.00 sec) 2024-25 Chapter 1.indd   3 11/26/2020   12:31:29 PM 4 InformatIcs PractIces 1.2 Functions in sQL We know that a function is used to perform some particular task and it returns zero or more values as a result. Functions are useful while writing SQL queries also. Functions can be applied to work on single or multiple records (rows) of a table. Depending on their application in one or multiple rows, SQL functions are categorised as Single row functions and Aggregate functions. 1.2.1 Single Row Functions These are also known as Scalar functions. Single row functions are applied on a single value and return a single value. Figure 1.2 lists different single row functions under three categories —  Numeric (Math), String, Date and Time. Math functions accept numeric value as input, and return a numeric value as a result. String functions accept character value as input, and return either character or numeric values as output. Date and time functions accept date and time values as input, and return numeric or string, or date and time values as output. Single Row Function Numeric Function String Function Date Function POWER() UCASE() NOW() ROUND() LCASE() DATE() MOD() MID() MONTH() LENGTH() MONTHNAME() LEFT() YEAR() RIGHT() DAY() INSTR() DAYNAME() LTRIM() RTRIM() TRIM() Figure 1.2: Three categories of single row functions in SQL 2024-25 Chapter 1.indd   4 11/26/2020   12:31:30 PM Querying and SQL FunctionS 5 (A) Numeric Functions Three commonly used numeric functions are POWER(), ROUND() and MOD(). Their usage along with syntax is given in Table 1.5. Table 1.5 Math Functions Function Description Example with output POWER(X,Y) Calculates X to the power Y. mysql> SELECT POWER(2,3); can also be written as Output: POW(X,Y) 8 ROUND(N,D) Rounds off number N to D mysql>SELECT ROUND(2912.564, 1); number of decimal places. Output: Note: If D=0, then it rounds off the number to the nearest 2912.6 integer. mysql> SELECT ROUND(283.2); Output: 283 MOD(A, B) Returns the remainder mysql> SELECT MOD(21, 2); after dividing number A by Output: number B. 1 Example 1.1 In order to increase sales, suppose the car dealer decides to offer his customers to pay the total amount in 10 easy EMIs (equal monthly installments). Assume that EMIs are required to be in multiples of 10,000. For that, the dealer wants to list the CarID and Price along with the following data from the Inventory table: a) Calculate GST as 12% of Price and display the result after rounding it off to one decimal place. mysql> SELECT ROUND(12/100*Price,1) "GST" FROM INVENTORY; +---------+ | GST     | +---------+ | 69913.6 | | 80773.4 | | 68043.7 | | 77743.0 | | 42624.6 | | 78589.7 | | 61680.0 | | 73680.0 | +---------+ 8 rows in set (0.00 sec) b) Add a new column FinalPrice to the table inventory, which will have the value as sum of Price and 12% of the GST. 2024-25 Chapter 1.indd   5 11/26/2020   12:31:30 PM 6 INFORMATICS PRACTICES mysql> ALTER TABLE INVENTORY ADD FinalPrice Numeric(10,1); Query OK, 8 rows affected (0.03 sec) Records: 8  Duplicates: 0  Warnings: 0 mysql> UPDATE INVENTORY SET FinalPrice=Price+Round(Price*12/100,1); Query OK, 8 rows affected (0.01 sec) Rows matched: 8 Changed: 8  Warnings: 0 mysql> SELECT * FROM INVENTORY; +-------+--------+-----------+----------+---------------+----------+-------------+ | CarId |CarName | Price  | Model  |YearManufacture| FuelType |  FinalPric | +-------+--------+-----------+----------+---------------+----------+-------------+ | D001 |Car1  | 582613.00 | LXI     |   2017 | Petrol   |   652526.6  | | D002 |Car1  | 673112.00 | VXI      | 2018 | Petrol   |   753885.4  | | B001  |Car2  | 567031.00 | Sigma1.2 |   2019  | Petrol   |   635074.7  | | B002  |Car2  | 647858.00 | Delta1.2 |   2018 | Petrol   |   725601.0  | | E001  |Car3  | 355205.00 | 5STR STD |   2017 | CNG      |   397829.6  | | E002  |Car3  | 654914.00 | CARE  |   2018 | CNG      |   733503.7  | | S001  |Car4  | 514000.00 | LXI    |   2017 | Petrol   |   575680.0  | | S002  |Car4  | 614000.00 | VXI    |   2018 | Petrol   |   687680.0  | +-------+--------+-----------+----------+---------------+----------+-------------+ 8 rows in set (0.00 sec) c) Calculate and display the amount to be paid each month (in multiples of 1000) which is to be calculated after dividing the FinalPrice of the car into 10 instalments. d) After dividing the amount into EMIs, find out the remaining amount to be paid immediately, by performing modular division. Following SQL query can be used to solve the above mentioned problems: mysql> select CarId, FinalPrice, ROUND((FinalPriceMOD(FinalPrice,10000))/10,0) "EMI", MOD(FinalPrice,10000) "Remaining Amount" FROM INVENTORY; +-------+------------+-------+------------------+ | CarId | FinalPrice | EMI   | Remaining Amount | +-------+------------+-------+------------------+ | D001  |   652526.6 | 65000 |           2526.6 | | D002  |   753885.4 | 75000 |           3885.4 | | B001  |   635074.7 | 63000 |           5074.7 | | B002  |   725601.0 | 72000 |           5601.0 | | E001  |   397829.6 | 39000 |           7829.6 | | E002  |   733503.7 | 73000 |           3503.7 | | S001  |   575680.0 | 57000 |           5680.0 | | S002  |   687680.0 | 68000 |           7680.0 | +-------+------------+-------+------------------+ 8 rows in set (0.00 sec) 2024-25 Chapter 1.indd   6 19-Sep-2023   10:15:54 AM Querying and SQL FunctionS 7 Example 1.2 a) Let us now add a new column Commission to the SALE table. The column Commission should have a total length of 7 in which 2 decimal places to be there. mysql> ALTER TABLE SALE ADD(Commission Numeric(7,2)); Query OK, 6 rows affected (0.34 sec) Records: 6 Duplicates: 0 Warnings: 0 b) Let us now  calculate commission for sales agents as 12 per cent of the SalePrice, insert the values to the newly added column Commission and then display records of the table SALE where commission > 73000. mysql> UPDATE SALE SET Commission=12/100*SalePrice; Query OK, 6 rows affected (0.06 sec) Rows matched: 6 Changed: 6  Warnings: 0 mysql> SELECT * FROM SALE WHERE Commission > 73000; +---------------+------+----------+------------+------+-----------+-----------+ |invoiceno|carid|custid| saledate |paymentmode |empid | saleprice |Commission | +---------------+------+----------+------------+------+-----------+-----------+ |I00001 |D001 |C0001 |2019-01-24|Credit Card |E004  | 613247.00 | 73589.64  | |I0000    |D002 |C0001 |2018-10-15|Bank Finance|E007  | 659982.00 | 79197.84  | |I00006   |S002 |C0002 |2019-01-30|Bank Finance|E007  | 620214.00 | 74425.68  | +---------------+------+-----------+------------+------+----------+-----------+ 3 rows in set (0.02 sec) c) Display InvoiceNo, SalePrice and Commission such that commission value is rounded off to 0. mysql> SELECT InvoiceNo, SalePrice, Round(Commission,0) FROM SALE; +-----------+-----------+---------------------+ Activity 1.1 | InvoiceNo | SalePrice | Round(Commission,0) | +-----------+-----------+---------------------+ Using the table SALE | I00001    | 613247.00 |               73590 | of CARSHOWROOM | I00002    | 590321.00 |               70839 | database, write | I00003    | 604000.00 |               72480 | SQL queries for the | I00004    | 659982.00 |               79198 | following: | I00005    | 369310.00 |               44317 | a) Display the InvoiceNo | I00006    | 620214.00 |               74426 | and commission +-----------+-----------+---------------------+ value rounded off to 6 rows in set (0.00 sec) zero decimal places. (B) String Functions b) Display the details of String functions can perform various operations on SALE where payment mode is credit card.. alphanumeric data which are stored in a table. They can be used to change the case (uppercase to lowercase 2024-25 Chapter 1.indd   7 11/26/2020   12:31:30 PM 8 InformatIcs PractIces or vice-versa), extract a substring, calculate the length of a string and so on. String functions and their usage are shown in Table 1.6. Table 1.6 String Functions Function Description Example with output UCASE(string) Converts string into uppercase. mysql> SELECT OR UCASE(“Informatics UPPER(string) Practices”); Output: INFORMATICS PRACTICES LOWER(string) Converts string into lowercase. mysql> SELECT OR LOWER(“Informatics LCASE(string) Practices”); Output: informatics practices MID(string, pos, n) Returns a substring of size n mysql> SELECT OR starting from the specified position MID(“Informatics”, 3, 4); SUBSTRING(string, (pos) of the string. If n is not Output: pos, n) specified, it returns the substring form OR from the position pos till end of the SUBSTR(string, pos, n) string. mysql> SELECT MID(‘Informatics’,7); Output: atics LENGTH(string) Return the number of characters mysql> SELECT in the specified string. LENGTH(“Informatics”); Output: 11 LEFT(string, N) Returns N number of characters mysql> SELECT from the left side of the string. LEFT(“Computer”, 4); Output: Comp RIGHT(string, N) Returns N number of characters mysql> SELECT from the right side of the string. RIGHT(“SCIENCE”, 3); Output: NCE INSTR(string, Returns the position of the first mysql> SELECT substring) occurrence of the substring in INSTR(“Informatics”, “ma”); the given string. Returns 0, if the Output: substring is not present in the string. 6 LTRIM(string) Returns the given string after mysql> SELECT LENGTH(“ removing leading white space DELHI”),  LENGTH(LTRIM(“ characters. DELHI”)); Output: +--------+--------+ | 7      | 5      | +--------+--------+ 1 row in set (0.00 sec) 2024-25 Chapter 1.indd   8 11/26/2020   12:31:30 PM Querying and SQL FunctionS 9 RTRIM(string) Returns the given string after mysql>SELECT LENGTH(“PEN  “) removing trailing white space LENGTH(RTRIM(“PEN  “)); characters. Output: +--------+--------+ | 5      | 3      | +--------+--------+ 1 row in set (0.00 sec) TRIM(string) Returns the given string after mysql> SELECT LENGTH(“  MADAM removing both leading and trailing “),LENGTH(TRIM(“  MADAM  “)); white space characters. Output: +--------+--------+ | 9      | 5      | +--------+--------+ 1 row in set (0.00 sec) Example 1.3 Let us use CUSTOMER relation shown in Table 1.2 to understand the working of string functions. a) Display customer name in lower case and customer email in upper case from table CUSTOMER. mysql> SELECT LOWER(CustName), UPPER(Email) FROM CUSTOMER; +-----------------+---------------------+ | LOWER(CustName) | UPPER(Email)        | +-----------------+---------------------+ | amitsaha     | AMITSAHA2@GMAIL.COM | | rehnuma     | REHNUMA@HOTMAIL.COM | | charvinayyar    | CHARVI123@YAHOO.COM | Activity 1.2 | gurpreet     | GUR_SINGH@YAHOO.COM | Using the table +-----------------+---------------------+ INVENTORY from 4 rows in set (0.00 sec) CARSHOWROOM database, write b) Display the length of the email and part of the email sql queries for the following: from the email ID before the character ‘@’. Note - Do a) Convert the CarMake not print ‘@’. to uppercase if its mysql> SELECT LENGTH(Email), LEFT(Email, INSTR(Email, value starts with the "@")-1) FROM CUSTOMER; letter ‘B’. +---------------+----------------------------------+ b) If the length of | LENGTH(Email) | LEFT(Email, INSTR(Email, "@")-1) | the car’s model is +---------------+----------------------------------+ greater than 4 then |            19 | amitsaha2                        | fetch the substring |            19 | rehnuma                          | starting from position |            19 | charvi123                        | 3 till the end from attribute Model. |            19 | gur_singh                        | +---------------+----------------------------------+ 4 rows in set (0.03 sec) The function INSTR will return the position of “@” in the email address. So to print email id without “@” we have to use position -1. 2024-25 Chapter 1.indd   9 11/26/2020   12:31:30 PM 10 INFORMATICS PRACTICES c) Let us assume that four digit area code is reflected in the mobile number starting from position number 3. For example, 2630 is the area code of mobile Activity 1.3 number 4726309212. Now, write the SQL query to display the area code of the customer living in Rohini. Using the table EMPLOYEE from mysql> SELECT MID(Phone,3,4) FROM CUSTOMER WHERE CARSHOWROOM CustAdd like ‘%Rohini%’; database, write +----------------+ SQL queries for the | MID(Phone,3,4) | following: +----------------+ | 1163           | a) Display employee +----------------+ name and the last 1 row in set (0.00 sec) 2 characters of his EmpId. d) Display emails after removing the domain name b) Display designation of employee and the extension “.com” from emails of the customers. position of character mysql> SELECT TRIM(“.com” from Email) FROM ‘e’ in designation, if CUSTOMER; present. +-------------------------+ | TRIM(".com" FROM Email) | +-------------------------+ | amitsaha2@gmail         | | rehnuma@hotmail         | | charvi123@yahoo         | | gur_singh@yahoo         | +-------------------------+ 4 rows in set (0.00 sec) e) Display details of all the customers having yahoo emails only. mysql> SELECT * FROM CUSTOMER WHERE Email LIKE "%yahoo%"; +-------+-------------+----------------------+-----------+--------------------+ |CustID | CustName | CustAdd | Phone  | Email              | +-------+-------------+----------------------+-----------+--------------------+ |C0003 |CharviNayyar |10/9, FF, Rohini     |6811635425 |charvi123@yahoo.com | |C0004 |Gurpreet | A-10/2,SF, MayurVihar|3511056125 | gur_singh@yahoo.com| +-------+-------------+----------------------+-----------+--------------------+ 2 rows in set (0.00 sec)t (C) Date and Time Functions There are various functions that are used to perform operations on date and time data. Some of the operations include displaying the current date, extracting each element of a date (day, month and year), displaying day of the week and so on. Table 1.7 explains various date and time functions. 2024-25 Chapter 1.indd   10 12-Apr-2023   3:04:49 PM Querying and SQL FunctionS 11 Table 1.7 Date Functions Function Description Example with output NOW() It returns the current mysql> SELECT NOW(); system date and time. Output: 2019-07-11 19:41:17 DATE() It returns the date part mysql> SELECT DATE(NOW()); from the given date/ Output: time expression. 2019-07-11 MONTH(date) It returns the month in mysql> SELECT MONTH(NOW()); numeric form from the Output: date. 7 MONTHNAME(date) It returns the month mysql> SELECT name from the specified MONTHNAME(“2003-11-28”); date. Output: November YEAR(date) It returns the year from mysql> SELECT YEAR(“2003-10-03”); the date. Output: 2003 DAY(date) It returns the day part mysql> SELECT DAY(“2003-03-24”); from the date. Output: 24 DAYNAME(date) It returns the name of mysql> SELECT the day from the date. DAYNAME(“2019-07-11”); Output: Thursday Example 1.4 Let us use the EMPLOYEE table of CARSHOWROOM database to illustrate the working of some of the date and time functions. a) Select the day, month number and year of joining of all employees. mysql> SELECT DAY(DOJ), MONTH(DOJ), YEAR(DOJ) FROM EMPLOYEE; +----------+------------+-----------+ Activity 1.4 | DAY(DOJ) | MONTH(DOJ) | YEAR(DOJ) | +----------+------------+-----------+ Using the table |       12 |         12 |      2017 | EMPLOYEE of |        5 |          6 |      2016 | CARSHOWROOM |        8 |          1 |      1999 | database, list the |        2 |         12 |      2010 | day of birth for all |        1 |          7 |      2012 | employees whose |        1 |          1 |      2017 | salary is more than |       23 |         10 |      2013 | 25000. +----------+------------+-----------+ 7 rows in set (0.03 sec) b) If the date of joining is not a Sunday, then display it in the following format "Wednesday, 26, November, 1979." 2024-25 Chapter 1.indd   11 11/26/2020   12:31:30 PM 12 InformatIcs PractIces Think and Reflect mysql> SELECT DAYNAME(DOJ), DAY(DOJ), MONTHNAME(DOJ), YEAR(DOJ) FROM EMPLOYEE WHERE DAYNAME(DOJ)!='Sunday'; Can we use arithmetic +------------+---------+---------------+---------+ operators (+, -. *, or /) |DAYNAME(DOJ)| DAY(DOJ)|MONTHNAME(DOJ) |YEAR(DOJ)| on date functions? +------------+---------+---------------+---------+ |Tuesday     |      12 | December      |    2017 | |Friday      |       8 | January       |    1999 | |Thursday    |       2 | December      |    2010 | |Wednesday   |      23 | October            2013 | +------------+---------+---------------+---------+ 4 rows in set (0.00 sec) 1.2.2 Aggregate Functions Aggregate functions are also called multiple row functions. These functions work on a set of records as a whole, and return a single value for each column of the records on which the function is applied. Table 1.8 shows the differences between single row functions and multiple row functions. Table 1.9 describes some of the aggregate functions along with their usage. Note that column must be of numeric type. Table 1.8 Differences between Single row and Multiple row Functions Single_row Functions Multiple_row functions 1. It operates on a single row at a time. 1. It operates on groups of rows. 2. It returns one result per row. 2. It returns one result for a group of rows. 3. It can be used in Select, Where, and Order 3. It can be used in the select clause only. by clause. 4. Math, String and Date functions are 4. Max(), Min(), Avg(), Sum(), Count() and Count(*) examples of single row functions. are examples of multiple row functions. Table 1.9 Aggregate Functions in SQL Function Description Example with output MAX(column) Returns the largest value from mysql> SELECT MAX(Price) FROM the specified column. INVENTORY; Output: 673112.00 MIN(column) Returns the smallest value from mysql> SELECT MIN(Price) FROM the specified column. INVENTORY; Output: 355205.00 AVG(column) Returns the average of the values mysql> SELECT AVG(Price) FROM in the specified column. INVENTORY; Output: 576091.625000 2024-25 Chapter 1.indd   12 11/26/2020   12:31:30 PM Querying and SQL FunctionS 13 SUM(column) Returns the sum of the values mysql> SELECT SUM(Price) FROM for the specified column. INVENTORY; Output: 4608733.00 COUNT(column) Returns the number of values mysql> SELECT * from MANAGER; in the specified column ignoring Output: the NULL values. +------+---------+ | MNO  | MEMNAME | Note: +------+---------+ In this example, let us consider | 1 | AMIT | a MANAGER table having two | 2 | KAVREET | attributes and four records. | 3 | KAVITA  | | 4 | NULL | +------+---------+ 4 rows in set (0.00 sec) mysql> SELECT COUNT(MEMNAME) FROM MANAGER; Output: +----------------+ | COUNT(MEMNAME) | +----------------+ |           3     | +----------------+ 1 row in set (0.01 sec) COUNT(*) Returns the number of records mysql> SELECT COUNT(*) from in a table. MANAGER; Note: In order to display the Output: number of records that matches +----------+ a particular criteria in the table, | count(*) | we have to use COUNT(*) with +----------+ WHERE clause. |        4 | +----------+ 1 row in set (0.00 sec) Example 1.5 a) Display the total number of records from table INVENTORY having a model as VXI. mysql> SELECT COUNT(*) FROM INVENTORY WHERE Model=”VXI”; +----------+ | COUNT(*) | +----------+ |        2 | +----------+ 1 row in set (0.00 sec) b) Display the total number of different types of Models available from table INVENTORY. 2024-25 Chapter 1.indd   13 11/26/2020   12:31:30 PM 14 InformatIcs PractIces mysql> SELECT COUNT(DISTINCT Model) FROM INVENTORY; Activity 1.5 +-----------------------+ | COUNT(DISTINCT MODEL) | a) Find sum of Sale +-----------------------+ Price of the cars |                     6 | purchased by the +-----------------------+ customer having ID 1 row in set (0.09 sec) C0001 from table SALE. c) Display the average price of all the cars with Model LXI from table INVENTORY. b) Find the maximum mysql> SELECT AVG(Price) FROM INVENTORY WHERE and minimum Model="LXI"; commission from the +---------------+ SALE table. | AVG(Price)    | +---------------+ | 548306.500000 | +---------------+ 1 row in set (0.03 sec) 1.3 GRouP BY in sQL At times we need to fetch a group of rows on the basis of common values in a column. This can be done using a GROUP BY clause. It groups the rows together that contain the same values in a specified column. We can use the aggregate functions (COUNT, MAX, MIN, AVG and SUM) to work on the grouped values. HAVING Clause in SQL is used to specify conditions on the rows with GROUP BY clause. Consider the SALE table from the CARSHOWROOM database: mysql> SELECT * FROM SALE; +-----------+------+-------+------------+------------------+-----+------------+------------+ |InvoiceNo|CarId|CustId| SaleDate | PaymentMode  |EmpID| SalePrice|Commission| +-----------+------+-------+------------+------------------+------+------------+------------+ |I00001   |D001 |C0001 |2019-01-24| Credit Card  | E004| 613247.00| 73589.64 | |I00002   |S001 |C0002 |2018-12-12| Online       | E001| 590321.00| 70838.52 | |I00003   |S002 |C0004 |2019-01-25| Cheque       | E010| 604000.00| 72480.00 | |I00004   |D002 |C0001 |2018-10-15| Bank Finance | E007| 659982.00| 79197.84 | |I00005   |E001 |C0003 |2018-12-20| Credit Card  | E002| 369310.00| 44317.20 | |I00006   |S002 |C0002 |2019-01-30| Bank Finance | E007| 620214.00| 74425.68 | +-----------+------+-------+------------+------------------+------+------------+------------+ 6 rows in set (0.11 sec) CarID, CustID, SaleDate, PaymentMode, EmpID, SalePrice are the columns that can have rows with the same values in it. So, GROUP BY clause can be used 2024-25 Chapter 1.indd   14 11/26/2020   12:31:30 PM Querying and SQL FunctionS 15 in these columns to find the number of records of a particular type (column), or to calculate the sum of the price of each car type. Example 1.6 a) Display the number of cars purchased by each customer from the SALE table. mysql> SELECT CustID, COUNT(*) "Number of Cars" FROM SALE GROUP BY CustID; +--------+----------------+ | CustID | Number of Cars | +--------+----------------+ | C0001  |              2 | | C0002  |              2 | | C0003  |              1 | | C0004  |              1 | +--------+----------------+ 4 rows in set (0.00 sec) b) Display the customer Id and number of cars purchased if the customer purchased more than 1 car from SALE table. mysql> SELECT CustID, COUNT(*) FROM SALE GROUP BY CustID HAVING Count(*)>1; +--------+----------+ | CustID | COUNT(*) | +--------+----------+ | C0001  |        2 | | C0002  |        2 | +--------+----------+ 2 rows in set (0.30 sec) c) Display the number of people in each category of payment mode from the table SALE. Activity 1.6 mysql> SELECT PaymentMode, COUNT(PaymentMode) FROM a) List the total number SALE GROUP BY Paymentmode ORDER BY Paymentmode; of cars sold by each +--------------+--------------------+ employee. | PaymentMode  | Count(PaymentMode) | +--------------+--------------------+ b) List the maximum | Bank Finance |                  2 | sale made by each | Cheque       |                  1 | employee. | Credit Card  |                  2 | | Online       |                  1 | +--------------+--------------------+ 4 rows in set (0.00 sec) d) Display the PaymentMode and number of payments made using that mode more than once. mysql> SELECT PaymentMode, Count(PaymentMode) FROM SALE GROUP BY Paymentmode HAVING COUNT(*)>1 ORDER 2024-25 Chapter 1.indd   15 11/26/2020   12:31:30 PM 16 InformatIcs PractIces notes BY Paymentmode; +--------------+--------------------+ | PaymentMode  | Count(PaymentMode) | +--------------+--------------------+ | Bank Finance |                  2 | | Credit Card  |                  2 | +--------------+--------------------+ 2 rows in set (0.00 sec) 1.4 oPeRations on ReLations We can perform certain operations on relations like Union, Intersection, and Set Difference to merge the tuples of two tables. These three operations are binary operations as they work upon two tables. Note here, that these operations can only be applied if both the relations have the same number of attributes, and corresponding attributes in both tables have the same domain. 1.4.1 UNION (U) This operation is used to combine the selected rows of two tables at a time. If some rows are the same in both the tables, then the result of the Union operation will show those rows only once. Figure 1.3 shows union of two sets. Music Dance Figure 1.3: Union of two sets Let us consider two relations DANCE and MUSIC shown in Tables 1.10 and 1.11 respectively. Table 1.10 DANCE +------+--------+-------+ | SNo  | Name   | Class |