Chapter Structured Query 9 Language (SQL) “Any unique image that you desire probably already exists on the internet or in some database... The problem today is no longer how to create the right image, but how to find an already existing one. ” — Lev Manovich In this Chapter » Introduction » Structured Query Language (SQL) 9.1 IntroductIon » Data Types and Constraints in MySQL We have learnt about Relational Database Management Systems (RDBMS) and its purpose » SQL for Data Definition in the previous chapter. There are many » SQL for Data RDBMS such as MySQL, Microsoft SQL Server, Manipulation PostgreSQL, Oracle, etc. that allow us to create » SQL for Data Query a database consisting of relations. These RDBMS » Data Updation and also allow us to store, retrieve and manipulate Deletion data on that database through queries. In this » Functions in SQL chapter, we will learn how to create, populate and » GROUP BY Clause in SQL query databases using MySQL. » Operations on Relations 9.2  Structured Query Language (SQL) » Using Two Relations in a Query One has to write application programs to access data in case of a file system. However, for database management systems there are special kinds of languages called query language that can be used to access and manipulate data from the database. The Structured Query Language (SQL) is the most popular query language used by major relational 2024-25 Chpater-9.indd   131 18-Jun-21   2:35:43 PM database management systems such as MySQL, ORACLE, SQL Server, etc. Activity 9.1 SQL is easy to learn as the statements comprise of descriptive English words and are not case sensitive. Find and list other types of databases We can create and interact with a database using SQL other than easily. Benefit of using SQL is that we do not have to RDBMS. specify how to get the data from the database. Rather, we simply specify what is to be retrieved, and SQL does the rest. Although called a query language, SQL can do much more, besides querying. SQL provides statements for defining the structure of the data, manipulating data in the database, declaring constraints and retrieving data from the database in various ways, depending on our requirements. In this chapter, we will use the StudentAttendance discussed in chapter 8 and create a database. We will also learn how to populate databases with data, manipulate data and retrieve data from a database through SQL queries. 9.2.1 Installing MySQL MySQL is an open source RDBMS software which can be easily downloaded from the official website https:// dev.mysql.com/downloads. After installing MySQL, start MySQL service. The appearance of mysql> prompt (Figure 9.1) means that MySQL is ready to accept SQL statements. Figure 9.1: MySQL Shell Following are some important points to be kept in mind while using SQL: 132 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   132 18-Jun-21   2:35:44 PM • SQL is case insensitive. For example, the column names ‘salary’ and ‘SALARY’ are the same for SQL. • Always end SQL statements with a semicolon (;). • To enter multiline SQL statements, we don’t write “;” after the first line. We press the Enter key to continue on the next line. The prompt mysql> then changes to “->”, indicating that statement is continued to the next line. After the last line, put “;” and press enter. 9.3 data typeS and conStraIntS In MySQL We know that a database consists of one or more relations and each relation (table) is made up of attributes (column). Each attribute has a data type. We can also specify constraints for each attribute of a relation. 9.3.1 Data type of Attribute Activity 9.2 What are the other Data type of an attribute indicates the type of data value data types supported that an attribute can have. It also decides the operations in MySQL? Are there that can be performed on the data of that attribute. other variants of For example, arithmetic operations can be performed integer and float on numeric data but not on character data. Commonly data type? used data types in MySQL are numeric types, date and time types, and string types as shown in Table 9.1. Table 9.1 Commonly used data types in MySQL Data type Description CHAR(n) Specifies character type data of length n where n could be any value from 0 to 255. CHAR is of fixed length, means, declaring CHAR (10) implies to reserve spaces for 10 characters. If data does not have 10 characters (e.g., ‘city’ has four characters), MySQL fills the remaining 6 characters with spaces padded on the right. VARCHAR(n) Specifies character type data of length where n could be any value from 0 to 65535. But unlike CHAR, VARCHAR(n) is a variable-length data type. That is, declaring VARCHAR (30) means a maximum of 30 characters can be stored but the actual allocated bytes will depend on the length of entered string. So ‘city’ in VARCHAR (30) will occupy space needed to store 4 characters only. INT INT specifies an integer value. Each INT value occupies 4 bytes of storage. The range of unsigned values allowed in a 4 byte integer type are  0 to 4,294,967,295. For values larger than that, we have to use BIGINT, which occupies 8 bytes. FLOAT Holds numbers with decimal points. Each FLOAT value occupies 4 bytes. DATE The DATE type is used for dates in 'YYYY-MM-DD' format. YYYY is the 4 digit year, MM is the 2 digit month and DD is the 2 digit date. The supported range is '1000-01-01' to '9999-12-31'. Structured Query Language (SQL) 133 2024-25 Chpater-9.indd   133 18-Jun-21   2:35:44 PM 9.3.2 Constraints Which two Constraints are the certain types of restrictions on the constraints when applied together will data values that an attribute can have. Table 9.2 lists produce a Primary some of the commonly used constraints in SQL. They Key constraint? are used to ensure correctness of data. However, it is not mandatory to define constraints for each attribute of a table. Table 9.2 Commonly used SQL Constraints Constraint Description NOT NULL Ensures that a column cannot have NULL values where NULL means missing/ unknown/not applicable value. UNIQUE Ensures that all the values in a column are distinct/unique DEFAULT A default value specified for the column if no value is provided PRIMARY KEY The column which can uniquely identify each row/record in a table. FOREIGN KEY The column which refers to value of an attribute defined as primary key in another table 9.4 SQL for data defInItIon In order to be able to store data we need to first define the relation schema. Defining a schema includes creating a relation and giving name to a relation, identifying the attributes in a relation, deciding upon the datatype for each attribute and also specify the constraints as per the requirements. Sometimes, we may require to make changes to the relation schema also. SQL allows us to write statements for defining, modifying and deleting relation schemas. These are part of Data Definition Language (DDL). We have already learned that the data are stored in relations or tables in a database. Hence, we can say that a database is a collection of tables. The Create statement is used to create a database and its tables (relations). Before creating a database, we should be clear about the number of tables the database will have, the columns (attributes) in each table along with the data type of each column, and its constraint, if any. 9.4.1 CREATE Database To create a database, we use the CREATE DATABASE statement as shown in the following syntax: CREATE DATABASE databasename; To create a database called StudentAttendance, we will type following command at mysql prompt. 134 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   134 18-Jun-21   2:35:44 PM mysql> CREATE DATABASE StudentAttendance; Query OK, 1 row affected (0.02 sec) Note: In LINUX environment, names for database and tables are case-sensitive whereas in WINDOWS, there is no such differentiation. However, as a good practice, it is suggested to write database/table name in the same letter cases that were used at the time of their creation. A DBMS can manage multiple databases on one computer. Therefore, we need to select the database that we want to use. To know the names of existing Activity 9.3 databases, we use the statement SHOW DATABASES. Type the statement From the listed databases, we can select the database to show database;  Does be used. Once the database is selected, we can proceed it show the name of StudentAttendance with creating tables or querying data. database? In order to use the StudentAttendance database, the following SQL statement is required. mysql> USE StudentAttendance; Database changed Initially, the created database is empty. It can be checked by using the show tables statement that lists names of all the tables within a database. mysql> SHOW TABLES; Empty set (0.06 sec) 9.4.2 CREATE Table After creating a database StudentAttendance, we need to define relations in this database and specify attributes for each relation along with data type and constraint (if any) for each attribute. This is done using the CREATE TABLE statement. Syntax: CREATE TABLE tablename( attributename1 datatype constraint, attributename2 datatype constraint, : attributenameN datatype constraint); It is important to observe the following points with respect to the CREATE TABLE statement: • The number of columns in a table defines the degree of that relation, which is denoted by N. • Attribute name specifies the name of the column in the table. • Datatype specifies the type of data that an attribute can hold. Structured Query Language (SQL) 135 2024-25 Chpater-9.indd   135 18-Jun-21   2:35:44 PM • Constraint indicates the restrictions imposed on the values of an attribute. By default, each attribute can take NULL values except for the primary key. Let us identify data types of the attributes of table STUDENT along with their constraints (if any). Assuming maximum students in a class to be 100 and values of roll number in a sequence from 1 to 100, we know that 3 digits are sufficient to store values for the attribute RollNumber. Hence, data type INT is appropriate for this attribute. Total number of characters in a student name (SName) can differ. Assuming maximum characters in a name as 20, we use VARCHAR(20) for the SName column. Data type for the attribute SDateofBirth is DATE and supposing the school uses guardian’s 12 digit Aadhaar number as GUID, we can declare GUID as CHAR (12) since Aadhaar number is of fixed length and we are not going to perform any mathematical operation on GUID. Table 9.3, 9.4 and 9.5 shows the chosen data type and constraint for each attribute of the relations STUDENT, GUARDIAN and ATTENDANCE, respectively. Table 9.3 Data types and constraints for the attributes of relation STUDENT Attribute Name Data expected to be stored Data type Constraint RollNumber Numeric value consisting of maximum 3 digits INT PRIMARY KEY SName Variant length string of maximum 20 characters VARCHAR(20) NOT NULL SDateofBirth Date value DATE NOT NULL GUID Numeric value consisting of 12 digits CHAR (12) FOREIGN KEY Table 9.4 Data types and constraints for the attributes of relation GUARDIAN Attribute Name Data expected to be stored Data type Constraint GUID Numeric value consisting of 12 digit Aadhaar CHAR (12) PRIMARY KEY number GName Variant length string of maximum 20 VARCHAR(20) NOT NULL characters GPhone Numeric value consisting of 10 digits CHAR(10) NULL UNIQUE GAddress Variant length String of size 30 characters VARCHAR(30) NOT NULL Table 9.5 Data types and constraints for the attributes of relation ATTENDANCE. Attribute Name Data expected to be stored Data type Constraint AttendanceDate Date value DATE PRIMARY KEY* RollNumber Numeric value consisting of maximum 3 INT PRIMARY KEY* digits FOREIGN KEY AttendanceStatus ‘P’ for present and ‘A’ for absent CHAR(1) NOT NULL *means part of composite primary key. 136 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   136 18-Jun-21   2:35:45 PM Once data types and constraints are identified, let us create tables without specifying constraints along with Which datatype out the attribute name for simplification. We will learn to of Char and Varchar will you prefer for incorporate constraints on attributes in Section 9.4.4. storing contact Example 9.1 Create table STUDENT. number(mobile number)? Discuss. mysql> CREATE TABLE STUDENT( -> RollNumber  INT, -> SName VARCHAR(20), -> SDateofBirth DATE, -> GUID CHAR (12), -> PRIMARY KEY (RollNumber)); Query OK, 0 rows affected (0.91 sec) Note: “,” is used to separate two attributes and each statement terminates with a semi-colon (;). The arrow (->) is an interactive continuation prompt. If we enter an unfinished statement, the SQL shell will wait for us to enter the rest of the statement. 9.4.3 Describe Table We can view the structure of an already created table using the DESCRIBE statement or DESC statement. Syntax: DESCRIBE tablename; mysql> DESCRIBE STUDENT; +--------------+-------------+------+-----+---------+-------+ | Field        | Type        | Null | Key | Default | Extra | +--------------+-------------+------+-----+---------+-------+ | RollNumber   | int         | NO   | PRI | NULL    |       | | SName        | varchar(20) | YES  |     | NULL    |       | | SDateofBirth | date        | YES  |     | NULL    |       | | GUID         | char(12)    | YES  |     | NULL    |       | +--------------+-------------+------+-----+---------+-------+ 4 rows in set (0.06 sec) We can use the SHOW TABLES statement to see the tables in the StudentAttendance database. So far, we Activity 9.4 have only the STUDENT table. Create the other two mysql> SHOW TABLES; relations GUARDIAN +------------------------------+ | Tables_in_studentattendance  | and ATTENDANCE as +------------------------------+ per data types given | student                      | in Table 9.4 and 9.5 respectively, and view their structures. +------------------------------+ Do not add any 1 row in set (0.00 sec) constraint in these two 9.4.4 ALTER Table tables. After creating a table, we may realise that we need to add/remove an attribute or to modify the datatype of an existing attribute or to add constraint in attribute. In Structured Query Language (SQL) 137 2024-25 Chpater-9.indd   137 18-Jun-21   2:35:45 PM all such cases, we need to change or alter the structure (schema) of the table by using the alter statement. (A) Add primary key to a relation Let us now alter the tables created in Activity 9.4. The following MySQL statement adds a primary key to the GUARDIAN relation: mysql> ALTER TABLE GUARDIAN ADD PRIMARY KEY (GUID); Query OK, 0 rows affected (1.14 sec) Records: 0 Duplicates: 0 Warnings: 0 Now let us add the primary key to the ATTENDANCE relation. The primary key of this relation is a composite key made up of two attributes - AttendanceDate and RollNumber. mysql> ALTER TABLE ATTENDANCE -> ADD PRIMARY KEY(AttendanceDate, RollNumber); Query OK, 0 rows affected (0.52 sec) Activity 9.5 Records: 0 Duplicates: 0 Warnings: 0 Add foreign key in the (B) Add foreign key to a relation ATTENDANCE table Once primary keys are added, the next step is to add (use Figure 9.1) to foreign keys to the relation (if any). Following points need identify referencing to be observed while adding foreign key to a relation: and referenced tables). • The referenced relation must be already created. • The referenced attribute(s) must be part of the primary key of the referenced relation. • Data types and size of referenced and referencing attributes must be the same. Syntax: ALTER TABLE table_name ADD FOREIGN KEY(attribute name) REFERENCES referenced_table_name (attribute name); Let us now add foreign key to the table STUDENT. Table 9.3 shows that attribute GUID (the referencing Name foreign keys in table ATTENDANCE attribute) is a foreign key and it refers to attribute GUID and STUDENT. Is  (the referenced attribute) of table GUARDIAN. Hence, there any foreign key STUDENT is the referencing table and GUARDIAN is the in table GUARDIAN. referenced table as shown in Figure 8.4 in the previous chapter. mysql> ALTER TABLE STUDENT -> ADD FOREIGN KEY(GUID) REFERENCES -> GUARDIAN(GUID); Query OK, 0 rows affected (0.75 sec) Records: 0 Duplicates: 0 Warnings: 0 (C) Add constraint UNIQUE to an existing attribute In GUARDIAN table, the attribute GPhone has a constraint UNIQUE which means no two values in that column should be the same. 138 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   138 18-Jun-21   2:35:45 PM Syntax: noteS ALTER TABLE table_name ADD UNIQUE (attribute name); Let us now add the constraint UNIQUE with the attribute GPhone of the table GUARDIAN as shown at table 9.4. mysql> ALTER TABLE GUARDIAN -> ADD UNIQUE(GPhone); Query OK, 0 rows affected (0.44 sec) Records: 0 Duplicates: 0 Warnings: 0 (D) Add an attribute to an existing table Sometimes, we may need to add an additional attribute in a table. It can be done using the ADD attribute statement as shown in the following Syntax: ALTER TABLE table_name ADD attribute name DATATYPE; Suppose, the principal of the school has decided to award scholarship to some needy students for which income of the guardian must be known. But, the school has not maintained the income attribute with table GUARDIAN so far. Therefore, the database designer now needs to add a new attribute Income of data type INT in the table GUARDIAN. mysql> ALTER TABLE GUARDIAN -> ADD income INT; Query OK, 0 rows affected (0.47 sec) Records: 0 Duplicates: 0 Warnings: 0 (E) Modify datatype of an attribute We can change data types of the existing attributes of a table using the following ALTER statement. Syntax: ALTER TABLE table_name MODIFY attribute DATATYPE; Suppose we need to change the size of the attribute GAddress from VARCHAR(30) to VARCHAR(40) of the GUARDIAN table. The MySQL statement will be: mysql> ALTER TABLE GUARDIAN -> MODIFY GAddress VARCHAR(40); Query OK, 0 rows affected (0.11 sec) Records: 0 Duplicates: 0 Warnings: 0 (F) Modify constraint of an attribute When we create a table, by default each attribute takes NULL value except for the attribute defined as primary key. We can change an attribute’s constraint from NULL to NOT NULL using an alter statement. Structured Query Language (SQL) 139 2024-25 Chpater-9.indd   139 18-Jun-21   2:35:45 PM Syntax: ALTER TABLE table_name MODIFY attribute DATATYPE What are the NOT NULL; minimum and maximum income  Note: We have to specify the data type of the attribute along with constraint NOT NULL while using MODIFY. values that can be entered in the income To associate NOT NULL constraint with attribute attribute given the SName of table STUDENT (table 9.3), we write the data type is INT? following MySQL statement: mysql> ALTER TABLE STUDENT -> MODIFY SName VARCHAR(20) NOT NULL; Query OK, 0 rows affected (0.47 sec) Records: 0 Duplicates: 0 Warnings: 0 (G) Add default value to an attribute If we want to specify default value for an attribute, then use the following syntax: ALTER TABLE table_name MODIFY attribute DATATYPE DEFAULT default_value; To set default value of SDateofBirth of STUDENT to 15th May 2000, write the following statement: mysql> ALTER TABLE STUDENT -> MODIFY SDateofBirth DATE DEFAULT ‘2000-0515’; Query OK, 0 rows affected (0.08 sec) Records: 0 Duplicates: 0 Warnings: 0 Note: We have to specify the data type of the attribute along with DEFAULT while using MODIFY. (H) Remove an attribute Using ALTER, we can remove attributes from a table, as shown in the following syntax: ALTER TABLE table_name DROP attribute; To remove the attribute income from table GUARDIAN (Table 9.4), write the following MySQL statement: mysql> ALTER TABLE GUARDIAN DROP income; Query OK, 0 rows affected (0.42 sec) Records: 0 Duplicates: 0 Warnings: 0 (I) Remove primary key from the table Sometime there may be a requirement to remove primary key constraint from the table. In that case, Alter table command can be used in the following way: Syntax: ALTER TABLE table_name DROP PRIMARY KEY; To remove primary key of  table GUARDIAN (Figure 9.4), write the following MySQL statement: mysql> ALTER TABLE GUARDIAN DROP PRIMARY KEY; Query OK, 0 rows affected (0.72 sec) Records: 0 Duplicates: 0 Warnings: 0 140 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   140 18-Jun-21   2:35:45 PM Note: We have dropped the primary key from the GUARDIAN table, noteS but each table should have a primary key to maintain uniqueness. Hence, we have to use the ADD statement with the Alter Table command to specify the primary key for the GUARDIAN table as shown in earlier examples. 9.4.5 DROP Statement Sometimes a table in a database or the database itself needs to be removed. We can use a DROP statement to remove a database or a table permanently from the system. However, one should be very cautious while using this statement as it cannot be undone. Syntax to drop a table: DROP TABLE table_name; Syntax to drop a database: DROP DATABASE database_name; Note: Using the DROP statement to remove a database will ultimately remove all the tables within it. 9.5 SQL for data ManIpuLatIon In the previous section, we created the database StudentAttendance having three relations STUDENT, GUARDIAN and ATTENDANCE. When we create a table, only its structure is created but the table has no data. To populate records in the table, INSERT statement is used. Also, table records can be deleted or updated using DELETE and UPDATE statements. These SQL statements are part of Data Manipulation Language (DML). Data Manipulation using a database means either insertion of new data, removal of existing data or modification of existing data in the database 9.5.1 INSERTION of Records INSERT INTO statement is used to insert new records in a table. Its syntax is: INSERT INTO tablename VALUES(value 1, value 2,....); Here, value 1 corresponds to attribute 1, value 2 corresponds to attribute 2 and so on. Note that we need not to specify attribute names in the insert statement if there are exactly the same numbers of values in the INSERT statement as the total number of attributes in the table. Caution: While populating records in a table with foreign key, ensure that records in referenced tables are already populated. Structured Query Language (SQL) 141 2024-25 Chpater-9.indd   141 18-Jun-21   2:35:45 PM Let us insert some records in the StudentAttendance database. We shall insert records in the GUARDIAN table first as it does not have any foreign key. A set of sample records for GUARDIAN table is shown in the given table (Table 9.6). Table 9.6 GUARDIAN Table GUID GName GPhone GAddress 444444444444 Amit Ahuja 5711492685 G-35, Ashok Vihar, Delhi 111111111111 Baichung Bhutia 3612967082 Flat no. 5, Darjeeling Appt., Shimla 101010101010 Himanshu Shah 4726309212 26/77, West Patel Nagar, Ahmedabad 333333333333 Danny Dsouza S -13, Ashok Village, Daman 466444444666 Sujata P. 3801923168 HNO-13, B- block, Preet Vihar, Madurai The following insert statement adds the first record in the table: mysql> INSERT INTO GUARDIAN -> VALUES (444444444444, 'Amit Ahuja', -> 5711492685, 'G-35,Ashok vihar, Delhi' ); Query OK, 1 row affected (0.01 sec) We can use the SQL statement SELECT * from table_name to view the inserted records. The SELECT statement will be explained in the next section. mysql> SELECT * from  GUARDIAN; +--------------+---------------+------------+---------------------------+ | GUID         | GName         | Gphone     | GAddress                  | +--------------+---------------+------------+---------------------------+ | 444444444444 | Amit Ahuja    | 5711492685 | G-35, Ashok vihar, Delhi  | +--------------+---------------+------------+---------------------------+ 1 row in set (0.00 sec) If we want to insert values only for some of the attributes in a table (supposing other attributes having NULL or any other default value), then we shall specify Activity 9.6 the attribute names in which the values are to be inserted using the following syntax of INSERT INTO statement. Write SQL statements to insert the remaining Syntax: 3 rows of table INSERT INTO tablename (column1, column2, ...) 9.6 in table VALUES (value1, value2,  ...); GUARDIAN. To insert the fourth record of Table 9.6 where GPhone is not given, we need to insert values in the other three fields (GPhone was set to NULL by default at the time of table creation). In this case, we have to specify the names of attributes in which we want to insert values. The values must be given in the same order in which attributes are written in INSERT statement. 142 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   142 3/31/2023   2:33:53 PM mysql> INSERT INTO GUARDIAN(GUID, GName, GAddress) -> VALUES (333333333333, 'Danny Dsouza', -> 'S -13, Ashok Village, Daman' ); Query OK, 1 row affected (0.03 sec) Note: Text and date values must be enclosed in ‘ ’ (single quotes). mysql> SELECT * from GUARDIAN; +--------------+--------------+-----------+---------------------------+ | GUID         | GName        | Gphone    | GAddress                  | +--------------+--------------+-----------+---------------------------+ | 333333333333 | Danny Dsouza | NULL      | S -13, Ashok Village,Daman| | 444444444444 | Amit Ahuja   | 5711492685| G-35, Ashok vihar, Delhi  | +--------------+--------------+-----------+---------------------------+ 2 rows in set (0.00 sec) Let us now insert the records given in Table 9.7 into the STUDENT table. Table 9.7 STUDENT Table RollNumber SName SDateofBirth GUID 1 Atharv Ahuja 2003-05-15 444444444444 2 Daizy Bhutia 2002-02-28 111111111111 3 Taleem Shah 2002-02-28 4 John Dsouza 2003-08-18 333333333333 5 Ali Shah 2003-07-05 101010101010 6 Manika P. 2002-03-10 466444444666 To insert the first record of Table 9.7, we write the following MySQL statement mysql> INSERT INTO STUDENT Activity 9.7 -> VALUES(1,'Atharv Ahuja','2003-05-15', Write SQL statements 444444444444); to insert the Query OK, 1 row affected (0.11 sec) remaining 4 rows OR of table 9.7 in mysql> INSERT INTO STUDENT (RollNumber, SName, SDateofBirth, GUID) table STUDENT. -> VALUES (1,'Atharv Ahuja','2003-05-15', 444444444444); Query OK, 1 row affected (0.02 sec) Recall that Date is stored in ‘YYYY-MM-DD’ format. mysql> SELECT * from STUDENT; +------------+--------------+--------------+--------------+ | RollNumber | SName        | SDateofBirth | GUID         | +------------+--------------+--------------+--------------+ |          1 | Atharv Ahuja | 2003-05-15   | 444444444444 | +------------+--------------+--------------+--------------+ 1 row in set (0.00 sec) Let us now insert the third record of Table 9.7 where GUID is NULL. Recall that GUID is foreign key of this table and thus can take NULL value. Hence, we can put NULL value for GUID and insert the record by using the following statement: Structured Query Language (SQL) 143 2024-25 Chpater-9.indd   143 18-Jun-21   2:35:45 PM mysql> INSERT INTO STUDENT -> VALUES(3, 'Taleem Shah','2002-02-28', NULL); Query OK, 1 row affected (0.05 sec) mysql> SELECT * from STUDENT; +------------+--------------+--------------+--------------+ | RollNumber | SName        | SDateofBirth | GUID         | +------------+--------------+--------------+--------------+ |          1 | Atharv Ahuja | 2003-05-15   | 444444444444 | |          3 | Taleem Shah  | 2002-02-28   |         NULL | +------------+--------------+--------------+--------------+ 2 rows in set (0.00 sec) We had to write NULL in the above insert statement because we are not mentioning the column names. Otherwise, we should mention the names of attributes along with the values if we need to insert data only for • Which of the two certain attributes, as shown in the following query: insert statement should be used  mysql> INSERT INTO STUDENT (RollNumber, SName, -> SDateofBirth) VALUES (3, 'Taleem Shah','2002-02when the order of 28'); data to be inserted Query OK, 1 row affected (0.05 sec) are not known? • Can we insert two records with the 9.6 SQL for data Query same roll number? So far we have learnt how to create a database and how to store and manipulate data in them. We are interested in storing data in a database as it is easier to retrieve data in future from databases in whatever way we want. SQL provides efficient mechanisms to retrieve data stored in multiple tables in MySQL database (or any other RDBMS). The SQL statement SELECT is used to retrieve data from the tables in a database and is also called a query statement. 9.6.1 SELECT Statement The SQL statement SELECT is used to retrieve data from the tables in a database and the output is also displayed in tabular form. Syntax: SELECT attribute1, attribute2, ... FROM table_name WHERE condition; Here, attribute1, attribute2, ... are the column names of the table table_name  from which we want to retrieve data. The FROM clause is always written with SELECT clause as it specifies the name of the table from which data is to be retrieved. The WHERE clause is optional and is used to retrieve data that meet specified condition(s). 144 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   144 18-Jun-21   2:35:45 PM To select all the data available in a table, we use the following select statement: SELECT * FROM table_name; Think and list few Example 9.2 The following query retrieves the name and examples from your date of birth of student with roll number 1: daily life where mysql> SELECT SName, SDateofBirth storing the data in the database and -> FROM STUDENT querying the same -> WHERE RollNumber = 1; can be helpful. +--------------+--------------+ | SName        | SDateofBirth | +--------------+--------------+ | Atharv Ahuja | 2003-05-15   | +--------------+--------------+ 1 row in set (0.03 sec) 9.6.2 QUERYING using Database OFFICE Organisations maintain databases to store data in the form of tables. Let us consider the database OFFICE of an organisation that has many related tables like EMPLOYEE, DEPARTMENT and so on. Every EMPLOYEE in the database is assigned to a DEPARTMENT and his/her Department number (DeptId) is stored as a foreign key in the table EMPLOYEE. Let us consider the relation ‘EMPLOYEE’ as shown in Table 9.8 and apply the SELECT statement to retrieve data: Table 9.8 Records to be inserted into the EMPLOYEE table EmpNo Ename Salary Bonus Deptld 101 Aaliya 10000 234 D02 102 Kritika 60000 123 D01 103 Shabbbir 45000 566 D01 104 Gurpreet 19000 565 D04 105 Joseph 34000 875 D03 106 Sanya 48000 695 D02 107 Vergese 15000 D01 108 Nachaobi 29000 D05 109 Daribha 42000 D04 110 Tanya 50000 467 D05 (A) Retrieve selected columns The following query selects employee numbers of all the employees: mysql> SELECT  EmpNo FROM  EMPLOYEE; +-------+ | EmpNo | +-------+ |   101 | |   102 | Structured Query Language (SQL) 145 2024-25 Chpater-9.indd   145 18-Jun-21   2:35:45 PM noteS |   103 | |   104 | |   105 | |   106 | |   107 | |   108 | |   109 | |   110 | +-------+ 10 rows in set (0.41 sec) The following query selects the employee number and employee name of all the employees, we write: mysql> SELECT EmpNo, Ename FROM  EMPLOYEE; +-------+----------+ | EmpNo | Ename    | +-------+----------+ |   101 | Aaliya   | |   102 | Kritika  | |   103 | Shabbir  | |   104 | Gurpreet | |   105 | Joseph   | |   106 | Sanya    | |   107 | Vergese  | |   108 | Nachaobi | |   109 | Daribha  | |   110 | Tanya    | +-------+----------+ 10 rows in set (0.00 sec) (B) Renaming of columns In case we want to rename any column while displaying the output, it can be done by using the alias 'AS'. The following query selects Employee name as Name in the output for all the employees: mysql> SELECT  EName  as Name FROM  EMPLOYEE; +----------+ | Name     | +----------+ | Aaliya   | | Kritika  | | Shabbir  | | Gurpreet | | Joseph   | | Sanya    | | Vergese  | | Nachaobi | | Daribha  | | Tanya    | +----------+ 10 rows in set (0.00 sec) Example 9.3 Select names of all employees along with their annual income (calculated as Salary*12). While displaying the query result, rename the column EName as Name mysql> SELECT EName as Name, Salary*12 FROM EMPLOYEE; 146 Computer SCienCe - ClaSS Xii 2024-25 Chpater-9.indd   146 18-Jun-21   2:35:45 PM