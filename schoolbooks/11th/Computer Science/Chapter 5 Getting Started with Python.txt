Chapter 5 Getting Started with Python 5.1 IntroductIon to Python “Computer programming We have written algorithms for different problems in is an art, because it applies Chapter 4. Let us now move a step further and create accumulated knowledge programs using any version of Python 3. But before to the world, because it learning about Python programming language, let us requires skill and ingenuity, understand what is a programming language and how and especially because it works. it produces objects of An ordered set of instructions to be executed by a beauty. A programmer who computer to carry out a specific task is called a program, subconsciously views himself and the language used to specify this set of instructions as an artist will enjoy what he to the computer is called a programming language. does and will do it better.” As we know that computers understand the language of 0s and 1s which is called machine language or low – Donald Knuth level language. However, it is difficult for humans to write or comprehend instructions using 0s and 1s. This led to the advent of high-level programming languages like Python, C++, Visual Basic, PHP, Java that are easier to manage by humans but are not directly understood by the computer. In this chapter A program written in a high-level language is called source code. Recall from Chapter 1 that language » Introduction to translators like compilers and interpreters are needed Python to translate the source code into machine language. » Python Keywords Python uses an interpreter to convert its instructions » Identifiers into machine language, so that it can be understood » Comments by the computer. An interpreter processes the program statements one by one, first translating and then » Data Types executing. This process is continued until an error » Operators is encountered or the whole program is executed » Expressions successfully. In both the cases, program execution » Statement will stop. On the contrary, a compiler translates the » Input and Output entire source code, as a whole, into the object code. » Type Conversion After scanning the whole program, it generates error » Debugging messages, if any. 2024-25 Ch 5.indd   87 08-Apr-19   12:35:10 PM 88 Computer SCienCe – ClaSS xi 5.1.1 Features of Python • Python is a high level language. It is a free and open source language. • It is an interpreted language, as Python programs are executed by an interpreter. • Python programs are easy to understand as Downloading Python they have a clearly defined syntax and relatively The latest version of simple structure. Python 3 is available on • Python is case-sensitive. For example, NUMBER the official website: and number are not same in Python. https://www.python.org/ • Python is portable and platform independent, means it can run on various operating systems and hardware platforms. • Python has a rich library of predefined functions. • Python is also helpful in web development. Many popular web services and applications are built using Python. • Python uses indentation for blocks and nested blocks. 5.1.2 Working with Python To write and run (execute) a Python program, we need to have a Python interpreter installed on our computer or we can use any online Python interpreter. The interpreter is also called Python shell. A sample screen of Python interpreter is shown in Figure 5.1: Figure 5.1: Python interpreter or shell In the above screen, the symbol >>> is the Python prompt, which indicates that the interpreter is ready to take instructions. We can type commands or statements on this prompt to execute them using a Python interpreter. 2024-25 Ch 5.indd   88 08-Apr-19   12:35:10 PM GettinG Started with Python 89 5.1.3 Execution Modes There are two ways to use the Python interpreter: a) Interactive mode b) Script mode Interactive mode allows execution of individual statement instantaneously. Whereas, Script mode allows us to write more than one instruction in a file called Python source code file that can be executed. (A) Interactive Mode To work in the interactive mode, we can simply type a Python statement on the >>> prompt directly. As soon as we press enter, the interpreter executes the statement and displays the result(s), as shown in Figure 5.2. Figure 5.2: Python interpreter in interactive mode Working in the interactive mode is convenient for testing a single line code for instant execution. But in the interactive mode, we cannot save the statements for future use and we have to retype the statements to run them again. (B) Script Mode In the script mode, we can write a Python program in a file, save it and then use the interpreter to execute it. Python scripts are saved as files where file name has extension “.py”. By default, the Python scripts are saved in the Python installation folder. To execute a script, we can either: a) Type the file name along with the path at the prompt. For example, if the name of the file is prog5-1.py, we type prog5-1.py. We can otherwise open the program directly from IDLE as shown in Figure 5.3. b) While working in the script mode, after saving the file, click [Run]->[Run Module] from the menu as shown in Figure 5.4. 2024-25 Ch 5.indd   89 08-Apr-19   12:35:11 PM 90 Computer SCienCe – ClaSS xi c) The output appears on shell as shown in Figure 5.5. Program 5-1 Write a program to show print statement in script mode. Figure 5.3: Python source code file (prog5-1.py) Figure 5.4: Execution of Python in Script mode using IDLE Figure 5.5: Output of a program executed in script mode 5.2 Python Keywords Keywords are reserved words. Each keyword has a specific meaning to the Python interpreter, and we can use a keyword in our program only for the purpose for which it has been defined. As Python is case sensitive, keywords must be written exactly as given in Table 5.1. Table 5.1 Python keywords False class finally is return None continue for lambda try 2024-25 Ch 5.indd   90 21-May-19   11:57:33 AM GettinG Started with Python 91 True def from nonlocal while notes and del global not with as elif if or yield assert else import pass break except in raise 5.3  IdentIfIers In programming languages, identifiers are names used to identify a variable, function, or other entities in a program. The rules for naming an identifier in Python are as follows: • The name should begin with an uppercase or a lowercase alphabet or an underscore sign (_). This may be followed by any combination of characters a–z, A–Z, 0–9 or underscore (_). Thus, an identifier cannot start with a digit. • It can be of any length. (However, it is preferred to keep it short and meaningful). • It should not be a keyword or reserved word given in Table 5.1. • We cannot use special symbols like !, @, #, $, %, etc., in identifiers. For example, to find the average of marks obtained by a student in three subjects, we can choose the identifiers as marks1, marks2, marks3 and avg rather than a, b, c, or A, B, C. avg = (marks1 + marks2 + marks3)/3 Similarly, to calculate the area of a rectangle, we can use identifier names, such as area, length, breadth instead of single alphabets as identifiers for clarity and more readability. area = length * breadth 5.4 VarIables A variable in a program is uniquely identified by a name (identifier). Variable in Python refers to an object — an item or element that is stored in the memory. Value of a variable can be a string (e.g., ‘b’, ‘Global Citizen’), numeric (e.g., 345) or any combination of alphanumeric characters (CD67). In Python we can use an assignment statement to create new variables and assign specific values to them. 2024-25 Ch 5.indd   91 08-Apr-19   12:35:11 PM 92 Computer SCienCe – ClaSS xi gender   = 'M' message  = "Keep Smiling" price    = 987.9 Program 5-2 Write a program to display values of variables in Python. #Program 5-2 #To display values of variables message = "Keep Smiling" print(message) userNo = 101 print('User Number is', userNo) Output: Keep Smiling User Number is 101 In the program 5-2, the variable message holds string type value and so its content is assigned within double quotes " " (can also be within single quotes ' '), whereas the value of variable userNo is not enclosed in quotes as it is a numeric value. Variable declaration is implicit in Python, means variables are automatically declared and defined when they are assigned a value the first time. Variables must always be assigned values before they are used in expressions as otherwise it will lead to an error in the program. Wherever a variable name occurs in an expression, the interpreter replaces it with the value of that particular variable. Program 5-3 Write a Python program to find the area of a rectangle given that its length is 10 units and breadth is 20 units. #Program 5-3 #To find the area of a rectangle length = 10 breadth = 20 area = length * breadth print(area) Output: 200 5.5 comments Comments are used to add a remark or a note in the source code. Comments are not executed by interpreter. 2024-25 Ch 5.indd   92 08-Apr-19   12:35:11 PM GettinG Started with Python 93 They are added with the purpose of making the source code easier for humans to understand. They are used primarily to document the meaning and purpose of source code and its input and output requirements, so that we can remember later how it functions and how to use it. For large and complex software, it may require programmers to work in teams and sometimes, a program written by one programmer is required to be used or maintained by another programmer. In such situations, documentations in the form of comments are needed to understand the working of the program. In Python, a comment starts with # (hash sign). Everything following the # till the end of that line is treated as a comment and the interpreter simply ignores it while executing the statement. Example 5.1 #Variable amount is the total spending on #grocery In the context of Object amount = 3400 Oriented Programming #totalMarks is sum of marks in all the tests (OOP), objects are a #of Mathematics representation of the real totalMarks = test1 + test2 + finalTest world, such as employee, student, vehicle, box, Program 5-4 Write a Python program to find the sum of book, etc. In any object two numbers. oriented programming language like C++, JAVA, #Program 5-4 etc., each object has two #To find the sum of two numbers things associated with num1 = 10 it: (i) data or attributes and (ii) behaviour or num2 = 20 methods. Further there result = num1 + num2 are concepts of class and print(result) class hierarchies from Output: which objects can be instantiated. However, 30 OOP concepts are not in 5.6 eVerythIng Is an object the scope of our present discussions. Python treats every value or data item whether numeric, Python also comes under string, or other type (discussed in the next section) as the category of object an object in the sense that it can be assigned to some oriented programming. However, in Python, the variable or can be passed to a function as an argument. definition of object is Every object in Python is assigned a unique identity loosely casted as some (ID) which remains the same for the lifetime of that object. objects may not have This ID is akin to the memory address of the object. The attributes or others may not have methods. function id() returns the identity of an object. 2024-25 Ch 5.indd   93 08-Apr-19   12:35:11 PM 94 Computer SCienCe – ClaSS xi Example 5.2 >>> num1 = 20 >>> id(num1) 1433920576  #identity of num1 >>> num2 = 30 - 10 >>> id(num2) 1433920576  #identity of num2 and num1 #are same as both refers to      #object 20 5.7 Data types Every value belongs to a specific data type in Python. Data type identifies the type of data values a variable can hold and the operations that can be performed on that data. Figure 5.6 enlists the data types available in Python. Dictionaries Figure 5.6: Different data types in Python 5.7.1 Number Number data type stores numerical values only. It is further classified into three different types: int, float and complex. Table 5.2 Numeric data types Type/ Class Description Examples int integer numbers –12, –3, 0, 125, 2 float real or floating point numbers –2.04, 4.0, 14.23 complex complex numbers 3 + 4j, 2 – 2j Boolean data type (bool) is a subtype of integer. It is a unique data type, consisting of two constants, True and False. Boolean True value is non-zero, non-null and non-empty. Boolean False is the value zero. 2024-25 Ch 5.indd   94 15-Jun-21   11:13:29 AM GettinG Started with Python 95 Let us now try to execute few statements in interactive notes mode to determine the data type of the variable using built-in function type(). Example 5.3 >>> num1 = 10 >>> type(num1) <class 'int'> >>> num2 = -1210 >>> type(num2) <class 'int'> >>> var1 = True >>> type(var1) <class 'bool'> >>> float1 = -1921.9 >>> type(float1) <class 'float'> >>> float2 = -9.8*10**2 >>> print(float2, type(float2)) -980.0000000000001 <class 'float'> >>> var2 = -3+7.2j >>> print(var2, type(var2)) (-3+7.2j) <class 'complex'> Variables of simple data types like integers, float, boolean, etc., hold single values. But such variables are not useful to hold a long list of information, for example, names of the months in a year, names of students in a class, names and numbers in a phone book or the list of artefacts in a museum. For this, Python provides data types like tuples, lists, dictionaries and sets. 5.7.2 Sequence A Python sequence is an ordered collection of items, where each item is indexed by an integer. The three types of sequence data types available in Python are Strings, Lists and Tuples. We will learn about each of them in detail in later chapters. A brief introduction to these data types is as follows: (A) String String is a group of characters. These characters may be alphabets, digits or special characters including spaces. String values are enclosed either in single quotation 2024-25 Ch 5.indd   95 08-Apr-19   12:35:11 PM 96 Computer SCienCe – ClaSS xi notes marks (e.g., ‘Hello’) or in double quotation marks (e.g., “Hello”). The quotes are not a part of the string, they are used to mark the beginning and end of the string for the interpreter. For example, >>> str1 = 'Hello Friend' >>> str2 = "452" We cannot perform numerical operations on strings, even when the string contains a numeric value, as in str2. (B) List List is a sequence of items separated by commas and the items are enclosed in square brackets [ ]. Example 5.4 #To create a list >>> list1 = [5, 3.4, "New Delhi", "20C", 45] #print the elements of the list list1 >>> print(list1) [5, 3.4, 'New Delhi', '20C', 45] (C) Tuple Tuple is a sequence of items separated by commas and items are enclosed in parenthesis ( ). This is unlike list, where values are enclosed in brackets [ ]. Once created, we cannot change the tuple. Example 5.5 #create a tuple tuple1 >>> tuple1 = (10, 20, "Apple", 3.4, 'a') #print the elements of the tuple tuple1 >>> print(tuple1) (10, 20, "Apple", 3.4, 'a') 5.7.3 Set Set is an unordered collection of items separated by commas and the items are enclosed in curly brackets { }. A set is similar to list, except that it cannot have duplicate entries. Once created, elements of a set cannot be changed. Example 5.6 #create a set >>> set1 = {10,20,3.14,"New Delhi"} >>> print(type(set1)) <class 'set'> >>> print(set1) {10, 20, 3.14, "New Delhi"} #duplicate elements are not included in set 2024-25 Ch 5.indd   96 08-Apr-19   12:35:11 PM GettinG Started with Python 97 >>> set2 = {1,2,1,3} >>> print(set2) {1, 2, 3} 5.7.4 None None is a special data type with a single value. It is used to signify the absence of value in a situation. None supports no special operations, and it is neither same as False nor 0 (zero). Example 5.7 >>> myVar = None >>> print(type(myVar)) <class 'NoneType'> >>> print(myVar) None 5.7.5 Mapping Mapping is an unordered data type in Python. Currently, there is only one standard mapping data type in Python called dictionary. (A) Dictionary Dictionary in Python holds data items in key-value pairs. Items in a dictionary are enclosed in curly brackets { }. Dictionaries permit faster access to data. Every key is separated from its value using a colon (:) sign. The key : value pairs of a dictionary can be accessed using the key. The keys are usually strings and their values can be any data type. In order to access any value in the dictionary, we have to specify its key in square brackets [ ]. Example 5.8 #create a dictionary >>> dict1 = {'Fruit':'Apple', 'Climate':'Cold', 'Price(kg)':120} >>> print(dict1) {'Fruit': 'Apple', 'Climate': 'Cold', 'Price(kg)': 120} >>> print(dict1['Price(kg)']) 120 5.7.6 Mutable and Immutable Data Types Sometimes we may require to change or update the values of certain variables used in a program. However, for certain data types, Python does not allow us to 2024-25 Ch 5.indd   97 11/10/2021   10:40:08 AM 98 Computer SCienCe – ClaSS xi change the values once a variable of that type has been created and assigned values. Variables whose values can be changed after they are created and assigned are called mutable. Variables whose values cannot be changed after they are created and assigned are called immutable. When an attempt is made to update the value of an immutable variable, the old variable is destroyed and a new variable is created by the same name in memory. Python data types can be classified into mutable and immutable as shown in Figure 5.7. Figure 5.7: Classification of data types Let us now see what happens when an attempt is made to update the value of a variable. >>> num1 = 300 This statement will create an object with value 300 and the object is referenced by the identifier num1 as shown in Figure 5.8. Figure 5.8: Object and its identifier >>> num2 = num1 The statement num2 = num1 will make num2 refer to the value 300, also being referred by num1, and stored at memory location number, say 1000. So, num1 shares the referenced location with num2 as shown Figure 5.9: Variables with same value have same identifier in Figure 5.9. 2024-25 Ch 5.indd   98 11/10/2021   10:53:15 AM GettinG Started with Python 99 In this manner P y t h o n makes the a s s i g n m e n t effective by copying only the reference, and not the data: >>> num1 = num2 +   Figure 5.10: Variables with different values have different identifiers 100 This statement 1 num1 = num2 + 100 links the variable num1 to a new object stored at memory location number say 2200 having a value 400. As num1 is an Python integer, which is an immutable type, it is rebuilt, as compares strings shown in Figure 5.10. lexicographically, using ASCII value of the characters. If the first 5.7.7 Deciding Usage of Python Data Types character of both the It is preferred to use lists when we need a simple iterable strings are same, the second character is collection of data that may go for frequent modifications. compared, and so on. For example, if we store the names of students of a class in a list, then it is easy to update the list when some new students join or some leave the course. Tuples are used when we do not need any change in the data. For example, names of months in a year. When we need uniqueness of elements and to avoid duplicacy it is preferable to use sets, for example, list of artefacts in a museum. If our data is being constantly modified or we need a fast lookup based on a custom key or we need a logical association between the key : value pair, it is advised to use dictionaries. A mobile phone book is a good application of dictionary. 5.8 oPerators An operator is used to perform specific mathematical or logical operation on values. The values that the operators work on are called operands. For example, in the expression 10 + num, the value 10, and the variable num are operands and the + (plus) sign is an operator. Python supports several kinds of operators whose categorisation is briefly explained in this section. 2024-25 Ch 5.indd   99 08-Apr-19   12:35:12 PM 100 Computer SCienCe – ClaSS xi 5.8.1 Arithmetic Operators Python supports arithmetic operators that are used to perform the four basic arithmetic operations as well as modular division, floor division and exponentiation. Table 5.3 Arithmetic Operators in Python Operator Operation Description Example (Try in Lab) + Addition Adds the two numeric values on >>> num1 = 5 either side of the operator >>> num2 = 6 >>> num1 + num2 This operator can also be used to 11 concatenate two strings on either >>> str1 = "Hello" side of the operator >>> str2 = "India" >>> str1 + str2 'HelloIndia' - Subtraction Subtracts the operand on the right >>> num1 = 5 from the operand on the left >>> num2 = 6 >>> num1 - num2 -1 * Multiplication Multiplies the two values on both >>> num1 = 5 side of the operator >>> num2 = 6 >>> num1 * num2 30 Repeats the item on left of the >>> str1 = 'India' operator if first operand is a >>> str1 * 2 string and second operand is an 'IndiaIndia' integer value / Division Divides the operand on the left >>> num1 = 8 by the operand on the right and >>> num2 = 4 returns the quotient >>> num2 / num1 0.5 % Modulus Divides the operand on the left >>> num1 = 13 by the operand on the right and >>> num2 = 5 returns the remainder >>> num1 % num2 3 // Floor Division Divides the operand on the left >>> num1 = 13 by the operand on the right and >>> num2 = 4 returns the quotient by removing >>> num1 // num2 the decimal part. It is sometimes 3 also called integer division. >>> num2 // num1 0 ** Exponent Performs exponential (power) >>> num1 = 3 calculation on operands. That is, >>> num2 = 4 raise the operand on the left to the >>> num1 ** num2 power of the operand on the right 81 5.8.2  Relational Operators Relational operator compares the values of the operands on its either side and determines the relationship among 2024-25 Ch 5.indd   100 08-Apr-19   12:35:12 PM GettinG Started with Python 101 them. Assume the Python variables num1 = 10, num2 = 0, num3 = 10, str1 = "Good", str2 = "Afternoon" for the following examples: Table 5.4 Relational operators in Python Operator Operation Description Example (Try in Lab) == Equals to If the values of two operands are >>> num1 == num2 equal, then the condition is True, False otherwise it is False >> str1 == str2 False != Not equal to If values of two operands are not >>> num1 != num2 equal, then condition is True, True otherwise it is False >>> str1 != str2 True >>> num1 != num3 False > Greater than If the value of the left-side operand >>> num1 > num2 is greater than the value of the right- True side operand, then condition is True, >>> str1 > str2 otherwise it is False True < Less than If the value of the left-side operand >>> num1 < num3 is less than the value of the right- False side operand, then condition is True, >>> str2 < str1 otherwise it is False True >= Greater than If the value of the left-side operand is >>> num1 >= num2 or equal to greater than or equal to the value of True the right-side operand, then condition >>> num2 >= num3 is True, otherwise it is False False >>> str1 >= str2 True <= Less than or If the value of the left operand is less >>> num1 <= num2 equal to than or equal to the value of the right False operand, then is True otherwise it is >>> num2 <= num3 False True >>> str1 <= str2 False 5.8.3 Assignment Operators Assignment operator assigns or changes the value of the variable on its left. Table 5.5 Assignment operators in Python Operator Description Example (Try in Lab) = Assigns value from right-side operand to left- >>> num1 = 2 side operand >>> num2 = num1 >>> num2 2 >>> country = 'India' >>> country 'India' 2024-25 Ch 5.indd   101 08-Apr-19   12:35:12 PM 102 Computer SCienCe – ClaSS xi += It adds the value of right-side operand to the >>> num1 = 10 left-side operand and assigns the result to the >>> num2 = 2 left-side operand >>> num1 += num2 Note: x += y is same as x = x + y >>> num1 12 >>> num2 2 >>> str1 = 'Hello' >>> str2 = 'India' >>> str1 += str2 >>> str1 'HelloIndia' -= It subtracts the value of right-side operand from >>> num1 = 10 the left-side operand and assigns the result to >>> num2 = 2 left-side operand >>> num1 -= num2 Note: x -= y is same as x = x - y >>> num1 8 *= It multiplies the value of right-side operand >>> num1 = 2 with the value of left-side operand and assigns >>> num2 = 3 the result to left-side operand >>> num1 *= 3 Note: x *= y is same as x = x * y >>> num1 6 >>> a = 'India' >>> a *= 3 >>> a 'IndiaIndiaIndia' /= It divides the value of left-side operand by the >>> num1 = 6 value of right-side operand and assigns the >>> num2 = 3 result to left-side operand >>> num1 /= num2 Note: x /= y is same as x = x / y >>> num1 2.0 %= It performs modulus operation using two >>> num1 = 7 operands and assigns the result to left-side >>> num2 = 3 operand >>> num1 %= num2 Note: x %= y is same as x = x % y >>> num1 1 //= It performs floor division using two operands >>> num1 = 7 and assigns the result to left-side operand >>> num2 = 3 Note: x //= y is same as x = x // y >>> num1 //= num2 >>> num1 2 **= It performs exponential (power) calculation on >>> num1 = 2 operators and assigns value to the left-side >>> num2 = 3 operand >>> num1 **= num2 Note: x **= y is same as x = x ** y >>> num1 8 2024-25 Ch 5.indd   102 08-Apr-19   12:35:12 PM GettinG Started with Python 103 5.8.4 Logical Operators There are three logical operators supported by Python. These operators (and, or, not) are to be written in lower case only. The logical operator evaluates to either True or False based on the logical operands on either side. Every value is logically either True or False. By default, all values are True except None, False, 0 (zero), empty collections "", (), [], {}, and few other special values. So if we say num1 = 10, num2 = -20, then both num1 and num2 are logically True. Table 5.6 Logical operators in Python Operator Operation Description Example (Try in Lab) and Logical AND If both the operands are >>> True and True True, then condition True becomes True >>> num1 = 10 >>> num2 = -20 >>> bool(num1 and num2) True >>> True and False False >>> num3 = 0 >>> bool(num1 and num3) False >>> False and False False or Logical OR If any of the two operands >>> True or True are True, then condition True becomes True >>> True or False True >>> bool(num1 or num3) True >>> False or False False not Logical NOT Used to reverse the logical >>> num1 = 10 state of its operand >>> bool(num1) True >>> not num1 >>> bool(num1) False 5.8.5 Identity Operators Identity operators are used to determine whether the value of a variable is of a certain type or not. Identity operators can also be used to determine whether two 2024-25 Ch 5.indd   103 08-Apr-19   12:35:12 PM 104 Computer SCienCe – ClaSS xi variables are referring to the same object or not. There are two identity operators. Table 5.7 Identity operators in Python Operator Description Example (Try in Lab) is Evaluates True if the variables on either >>> num1 = 5 side of the operator point towards the same >>> type(num1) is int memory location and False otherwise. True var1 is var2 results to True if id(var1) is >>> num2 = num1 equal to id(var2) >>> id(num1) 1433920576 >>> id(num2) 1433920576